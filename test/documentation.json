{
    "pipes": [],
    "interfaces": [
        {
            "name": "CENTERED_CARD",
            "id": "interface-CENTERED_CARD-b3d1fae56f5ac90a8890e5d0f00ff3cb",
            "file": "libs/ui-library/src/lib/interfaces/centered-card.ts",
            "type": "interface",
            "sourceCode": "import { CUSTOM_CARD } from './custom-card';\r\n\r\nexport interface CENTERED_CARD extends CUSTOM_CARD {\r\n  tagline?: string;\r\n  bordered?: boolean;\r\n  darkTheme?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "bordered",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "darkTheme",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "tagline",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "CUSTOM_CARD"
        },
        {
            "name": "CENTERED_CARD",
            "id": "interface-CENTERED_CARD-6d1038fd669f1b187d9a14127646dbf8-1",
            "file": "libs/ui-library/src/lib/stories/molecule/card/card.component.ts",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nexport interface CENTERED_CARD {\r\n    tagline?: string;\r\n    imageUrl?: string;\r\n    title?: string;\r\n    altText?: string;\r\n    price?: string;\r\n  }\r\n\r\n@Component({\r\n  selector: 'storybook-cards',\r\n  template: `<div\r\n    [ngClass]=\"[gridSize ? gridSize : '']\"\r\n    [ngStyle]=\"{\r\n      'background-color': backgroundColor\r\n    }\"\r\n  >\r\n    <lla-centered-card\r\n      *ngIf=\"centeredCard\"\r\n      [cardData]=\"cardData\"\r\n      [isbordered]=\"isbordered\"\r\n      [isdarkTheme]=\"isdarkTheme\"\r\n    ></lla-centered-card>\r\n    <lla-cta-card *ngIf=\"ctaCard\" [cardData]=\"cardData\"></lla-cta-card>\r\n    <lla-fullsize-card\r\n      *ngIf=\"fullsizeCard\"\r\n      [cardData]=\"cardData\"\r\n      [cardVariant]=\"cardVariant\"\r\n    ></lla-fullsize-card>\r\n    <lla-plans-card *ngIf=\"plansCard\" [cardData]=\"cardData\"></lla-plans-card>\r\n    <lla-wide-card *ngIf=\"wideCard\" [cardData]=\"cardData\"></lla-wide-card>\r\n  </div>`,\r\n  styleUrls: ['./card.scss'],\r\n})\r\n/**\r\n * StoryinputCodeComponent\r\n */\r\nexport default class StoryCardComponent {\r\n  getTheme = 'VTR';\r\n  gridSize = '';\r\n  isbordered = true;\r\n  isdarkTheme = true;\r\n  cardData = [];\r\n  /**\r\n   * To get the current theme from storybook\r\n   */\r\n  constructor(private breakpointObserver: BreakpointObserver) {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape,\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.matches) {\r\n          if (result.breakpoints[Breakpoints.XSmall]) {\r\n            this.gridSize = 'XS';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Small]) {\r\n            this.gridSize = 'SM';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Medium]) {\r\n            this.gridSize = 'MD';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Large]) {\r\n            this.gridSize = 'LG';\r\n          }\r\n          if (result.breakpoints[Breakpoints.XLarge]) {\r\n            this.gridSize = 'XL';\r\n          }\r\n          if (result.breakpoints[Breakpoints.HandsetLandscape]) {\r\n            this.gridSize = 'SML';\r\n          }\r\n        }\r\n      });\r\n  }\r\n  /**\r\n   * To get the current theme from storybook\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "altText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "price",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tagline",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CENTERED_CARD-1"
        },
        {
            "name": "Chainable",
            "id": "interface-Chainable-eeb6394b310e7cc14f0321cca3d9eb7f",
            "file": "apps/ubc-information-e2e/src/support/commands.ts",
            "type": "interface",
            "sourceCode": "declare namespace Cypress {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  interface Chainable<Subject> {\r\n    login(email: string, password: string): void;\r\n  }\r\n}\r\n//\r\n// -- This is a parent command --\r\nCypress.Commands.add('login', (email, password) => {\r\n  console.log('Custom command example: Login', email, password);\r\n});\r\n//\r\n// -- This is a child command --\r\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This is a dual command --\r\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This will overwrite an existing command --\r\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Chainable",
            "id": "interface-Chainable-eeb6394b310e7cc14f0321cca3d9eb7f-1",
            "file": "apps/ubc-pages-e2e/src/support/commands.ts",
            "type": "interface",
            "sourceCode": "declare namespace Cypress {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  interface Chainable<Subject> {\r\n    login(email: string, password: string): void;\r\n  }\r\n}\r\n//\r\n// -- This is a parent command --\r\nCypress.Commands.add('login', (email, password) => {\r\n  console.log('Custom command example: Login', email, password);\r\n});\r\n//\r\n// -- This is a child command --\r\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This is a dual command --\r\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This will overwrite an existing command --\r\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Chainable-1"
        },
        {
            "name": "Chainable",
            "id": "interface-Chainable-eeb6394b310e7cc14f0321cca3d9eb7f-2",
            "file": "apps/ubc-shell-e2e/src/support/commands.ts",
            "type": "interface",
            "sourceCode": "declare namespace Cypress {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  interface Chainable<Subject> {\r\n    login(email: string, password: string): void;\r\n  }\r\n}\r\n//\r\n// -- This is a parent command --\r\nCypress.Commands.add('login', (email, password) => {\r\n  console.log('Custom command example: Login', email, password);\r\n});\r\n//\r\n// -- This is a child command --\r\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This is a dual command --\r\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This will overwrite an existing command --\r\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "Chainable-2"
        },
        {
            "name": "checkadd",
            "id": "interface-checkadd-e0835605626adca1b87181da41391e53",
            "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
            "type": "interface",
            "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\r\nimport { moduleMetadata } from '@storybook/angular';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { CheckboxComponent } from './checkbox.component';\r\n\r\nexport interface checkadd {\r\n  name: string;\r\n  checked: boolean;\r\n  id: number;\r\n}\r\n\r\nexport default {\r\n  title: 'atom/Checkbox',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [MatCheckboxModule, MatListModule],\r\n    }),\r\n  ],\r\n  argTypes: {\r\n    label: { control: { type: 'boolean' } },\r\n    caption: { control: { type: 'boolean' } },\r\n    backgroundColor: { control: 'color' },\r\n  },\r\n} as Meta;\r\n\r\nconst Template: Story<CheckboxComponent> = (args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n});\r\n\r\nconst TemplateGroup: Story<CheckboxComponent> = (args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n});\r\n\r\nexport const Primary = Template.bind({});\r\nPrimary.args = {\r\n  isprimary: true,\r\n  backgroundColor: 'rgba(255,255,255,1)',\r\n  disabled: false,\r\n};\r\nPrimary.argTypes = {\r\n  disabled: { control: { type: 'boolean' } },\r\n  isprimary: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  iserror: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  isgroup: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  values: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  isChecked: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  ngOnInit: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n};\r\nPrimary.story = {\r\n  parameters: {\r\n    design: {\r\n      type: 'figma',\r\n      url:\r\n        'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A892',\r\n    },\r\n  },\r\n};\r\n\r\nexport const Error = Template.bind({});\r\nError.args = {\r\n  iserror: true,\r\n};\r\nError.argTypes = {\r\n  isprimary: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  iserror: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  isgroup: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  values: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  isChecked: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  ngOnInit: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n};\r\nError.story = {\r\n  parameters: {\r\n    design: {\r\n      type: 'figma',\r\n      url:\r\n        'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A892',\r\n    },\r\n  },\r\n};\r\n\r\nexport const Group = TemplateGroup.bind({});\r\nGroup.args = {\r\n  isgroup: true,\r\n  values: 4,\r\n};\r\nGroup.argTypes = {\r\n  values: { control: { type: 'number' } },\r\n  isprimary: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  iserror: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  isgroup: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n\r\n  isChecked: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n  ngOnInit: {\r\n    table: {\r\n      disable: true,\r\n    },\r\n  },\r\n};\r\nGroup.story = {\r\n  parameters: {\r\n    design: {\r\n      type: 'figma',\r\n      url:\r\n        'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A892',\r\n    },\r\n  },\r\n};\r\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CTA_CARD",
            "id": "interface-CTA_CARD-3aebe477fcd5d7775d0c5bea14d4a8d3",
            "file": "libs/ui-library/src/lib/interfaces/cta-card.ts",
            "type": "interface",
            "sourceCode": "import type { CUSTOM_CARD } from './custom-card';\r\n\r\nexport interface CTA_CARD extends CUSTOM_CARD {\r\n  placeholder?: string;\r\n  caption?: string;\r\n  btnText?: string;\r\n  bordered?: boolean;\r\n  darkTheme?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "bordered",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "btnText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "caption",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "darkTheme",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "CUSTOM_CARD"
        },
        {
            "name": "CUSTOM_CARD",
            "id": "interface-CUSTOM_CARD-dbf60367078d2713f09ecf0fddc5b365",
            "file": "libs/ui-library/src/lib/interfaces/custom-card.ts",
            "type": "interface",
            "sourceCode": "export interface CUSTOM_CARD {\r\n  imageUrl: string;\r\n  title: string;\r\n  altText?: string;\r\n  price?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "altText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "price",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FULLSIZE_CARD",
            "id": "interface-FULLSIZE_CARD-a0b4a9741faafadccaaf2b1fcf2810fc",
            "file": "libs/ui-library/src/lib/interfaces/fullsize-card.ts",
            "type": "interface",
            "sourceCode": "import { CUSTOM_CARD } from './custom-card';\r\n\r\nexport interface FULLSIZE_CARD extends CUSTOM_CARD {\r\n  caption?: string;\r\n  btnText?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "btnText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "caption",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "CUSTOM_CARD"
        },
        {
            "name": "Iimages",
            "id": "interface-Iimages-205e60750aee86f9e1014dcd20778a27",
            "file": "libs/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, OnInit, EventEmitter } from '@angular/core';\r\n\r\nexport interface Iimages {\r\n  path: string;\r\n  altTag: string;\r\n}\r\nexport interface Imatrix {\r\n  cols: number;\r\n  rows: number;\r\n}\r\n@Component({\r\n  selector: 'lla-img-gallery',\r\n  templateUrl: './img-gallery.component.html',\r\n  styleUrls: ['./img-gallery.component.scss'],\r\n})\r\nexport class ImgGalleryComponent implements OnInit {\r\n  @Input() imageList: Iimages[];\r\n  @Output() clickHandler: EventEmitter<null> = new EventEmitter();\r\n  maxImageToBeShown = 6;\r\n  // Pattern to get the desired layout based on image count\r\n  galleryDesignsAvailable = [\r\n    [{ cols: 1, rows: 1 }],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 2 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n  ];\r\n  imgCount: number;\r\n  layoutPatternPicked: Imatrix[];\r\n  columnCount: number;\r\n\r\n  /**\r\n   * Initate the image gallery\r\n   */\r\n  ngOnInit(): void {\r\n    this.imgCount = this.imageList.length;\r\n    this.columnCount = this.getColumnCount(this.imgCount);\r\n    const pattern = this.getLayoutPattern();\r\n    this.layoutPatternPicked = this.galleryDesignsAvailable[pattern];\r\n  }\r\n  /**\r\n   * Get the total number of grid columns.\r\n   * The column count for 1 image will be 1.\r\n   * The column count for 2 to 4 image will be 2.\r\n   * The column count for more than 4 image will be 3.\r\n   */\r\n  getColumnCount(imgCount: number): number {\r\n    return imgCount >= 5 ? 3 : imgCount == 1 ? 1 : 2;\r\n  }\r\n  /**\r\n   * Based on image count, decide to choose gallery pattern from the list of galleryDesignsAvailable\r\n   * Pick galleryDesignsAvailable[count-1] if the image size is count.\r\n   * Pick galleryDesignsAvailable[6] if the image size is more than 6.\r\n   */\r\n  getLayoutPattern(): number {\r\n    return this.imgCount > this.maxImageToBeShown ? 5 : this.imgCount - 1;\r\n  }\r\n  /**\r\n   * On click handler for gallery\r\n   */\r\n  onClickHandler(): void {\r\n    this.clickHandler.emit();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "altTag",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Imatrix",
            "id": "interface-Imatrix-205e60750aee86f9e1014dcd20778a27",
            "file": "libs/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, OnInit, EventEmitter } from '@angular/core';\r\n\r\nexport interface Iimages {\r\n  path: string;\r\n  altTag: string;\r\n}\r\nexport interface Imatrix {\r\n  cols: number;\r\n  rows: number;\r\n}\r\n@Component({\r\n  selector: 'lla-img-gallery',\r\n  templateUrl: './img-gallery.component.html',\r\n  styleUrls: ['./img-gallery.component.scss'],\r\n})\r\nexport class ImgGalleryComponent implements OnInit {\r\n  @Input() imageList: Iimages[];\r\n  @Output() clickHandler: EventEmitter<null> = new EventEmitter();\r\n  maxImageToBeShown = 6;\r\n  // Pattern to get the desired layout based on image count\r\n  galleryDesignsAvailable = [\r\n    [{ cols: 1, rows: 1 }],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 2 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n  ];\r\n  imgCount: number;\r\n  layoutPatternPicked: Imatrix[];\r\n  columnCount: number;\r\n\r\n  /**\r\n   * Initate the image gallery\r\n   */\r\n  ngOnInit(): void {\r\n    this.imgCount = this.imageList.length;\r\n    this.columnCount = this.getColumnCount(this.imgCount);\r\n    const pattern = this.getLayoutPattern();\r\n    this.layoutPatternPicked = this.galleryDesignsAvailable[pattern];\r\n  }\r\n  /**\r\n   * Get the total number of grid columns.\r\n   * The column count for 1 image will be 1.\r\n   * The column count for 2 to 4 image will be 2.\r\n   * The column count for more than 4 image will be 3.\r\n   */\r\n  getColumnCount(imgCount: number): number {\r\n    return imgCount >= 5 ? 3 : imgCount == 1 ? 1 : 2;\r\n  }\r\n  /**\r\n   * Based on image count, decide to choose gallery pattern from the list of galleryDesignsAvailable\r\n   * Pick galleryDesignsAvailable[count-1] if the image size is count.\r\n   * Pick galleryDesignsAvailable[6] if the image size is more than 6.\r\n   */\r\n  getLayoutPattern(): number {\r\n    return this.imgCount > this.maxImageToBeShown ? 5 : this.imgCount - 1;\r\n  }\r\n  /**\r\n   * On click handler for gallery\r\n   */\r\n  onClickHandler(): void {\r\n    this.clickHandler.emit();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cols",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "rows",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PLANS_CARD",
            "id": "interface-PLANS_CARD-ab2889392699ad09a28f896925711a7b",
            "file": "libs/ui-library/src/lib/interfaces/plans-card.ts",
            "type": "interface",
            "sourceCode": "import type { CUSTOM_CARD } from './custom-card';\r\n\r\nexport interface PLANS_CARD extends CUSTOM_CARD {\r\n  planContent: Array<any>;\r\n  icon?: string;\r\n  currency?: string;\r\n  btnText?: string;\r\n  priceTerms?: string;\r\n  subPriceTerms?: string;\r\n  normalPrice?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "btnText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "currency",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "normalPrice",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "planContent",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "priceTerms",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "subPriceTerms",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "CUSTOM_CARD"
        },
        {
            "name": "WIDE_CARD",
            "id": "interface-WIDE_CARD-078642802c9fd7d6fd1e9f0e8d13021c",
            "file": "libs/ui-library/src/lib/interfaces/wide-card.ts",
            "type": "interface",
            "sourceCode": "import type { CUSTOM_CARD } from './custom-card';\r\n\r\nexport interface WIDE_CARD extends CUSTOM_CARD {\r\n  tagline?: string;\r\n  placeholder?: string;\r\n  caption?: string;\r\n  body?: string;\r\n  btnText?: string;\r\n  contentRight?: boolean;\r\n  darkTheme?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "body",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "btnText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "caption",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "contentRight",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "darkTheme",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "tagline",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "CUSTOM_CARD"
        }
    ],
    "injectables": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-e5a74e159bde7f983dc76da41e1578dc",
            "file": "libs/ui-library/src/lib/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "body",
                    "defaultValue": "''",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "opacity",
                    "defaultValue": "'100'",
                    "line": 18,
                    "type": "COMPONENT_OPACITY"
                },
                {
                    "name": "status",
                    "line": 17,
                    "type": "COMPONENT_STATUS"
                },
                {
                    "name": "title",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'default'",
                    "line": 19,
                    "type": "COMPONENT_TYPE"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<null>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "description": "<p>To emit click event to parent component</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\ntype COMPONENT_STATUS = 'SUCCESS' | 'WARNING' | 'ERROR' | 'INFO';\r\ntype COMPONENT_OPACITY = '24' | '40' | '100';\r\ntype COMPONENT_TYPE = 'full-width' | 'default';\r\n\r\n@Component({\r\n  selector: 'lla-alert',\r\n  templateUrl: './alert.component.html',\r\n  styleUrls: ['./alert.component.scss'],\r\n})\r\n\r\n/**\r\n * Alerts component\r\n */\r\nexport class AlertComponent {\r\n  @Input() status: COMPONENT_STATUS;\r\n  @Input() opacity?: COMPONENT_OPACITY = '100';\r\n  @Input() type?: COMPONENT_TYPE = 'default';\r\n  @Input() title: string;\r\n  @Input() body?: string = '';\r\n  @Output() clickHandler?: EventEmitter<null> = new EventEmitter();\r\n\r\n  /**\r\n   * To emit click event to parent component\r\n   */\r\n  onClose() {\r\n    this.clickHandler.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"alert__position\">\r\n  <div\r\n    class=\"alert\"\r\n    [ngClass]=\"[\r\n      status ? (status | lowercase) : '',\r\n      opacity ? 'opacity__' + opacity : '',\r\n      type ? type + '-alert' : ''\r\n    ]\"\r\n  >\r\n    <span class=\"alert__title\">{{ title }}</span>\r\n    <a class=\"alert__close\" (click)=\"onClose()\">&times;</a>\r\n    <div class=\"alert__content\">\r\n      {{ body }}\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-387208d6779d94e568c7fe8fa91a71fb",
            "file": "apps/ubc-shell/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-shell",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-shell',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<lla-nav-bar></lla-nav-bar>\r\n<br>\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-32c736cba2c6be7861d0dc3d1602feae",
            "file": "libs/ui-library/src/lib/components/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadCrumb",
                    "line": 13,
                    "type": "string[]"
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClickHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "description": "<p>On click handler of breadcrumb</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-breadcrumb',\r\n  templateUrl: './breadcrumb.component.html',\r\n  styleUrls: ['./breadcrumb.component.scss'],\r\n})\r\n\r\n/**\r\n * BreadcrumbComponent\r\n */\r\nexport class BreadcrumbComponent {\r\n  @Input() breadCrumb: string[];\r\n  @Input() isDarkMode?: boolean = false;\r\n  @Output() clickHandler: EventEmitter<string> = new EventEmitter();\r\n\r\n  /**\r\n   * On click handler of breadcrumb\r\n   */\r\n  onClickHandler(event: MouseEvent): void {\r\n    this.clickHandler.emit((event.target as HTMLInputElement).innerHTML.trim());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div [ngClass]=\"{ breadcrumb: true, 'dark-mode': isDarkMode }\">\r\n  <div class=\"breadcrumb__wrapper\">\r\n    <a\r\n      (click)=\"onClickHandler($event)\"\r\n      class=\"breadcrumb__wrapper__item\"\r\n      *ngFor=\"let item of breadCrumb\"\r\n    >\r\n      {{ item }}\r\n    </a>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ButtonsComponent",
            "id": "component-ButtonsComponent-d9d3300a3e80fee1410a1c793220ef7c",
            "file": "libs/ui-library/src/lib/stories/atom/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "bgcolor",
                    "defaultValue": "'white'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "extraClass",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "ghostText",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLink",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isPrimary",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isSecondary",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "noExist",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "description": "<p>Buttons component ngOnInit</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\n/**\r\n * Buttons component ngOnInit\r\n */\r\nexport class ButtonsComponent implements OnInit {\r\n  extraClass = '';\r\n  text = '';\r\n  backgroundColor = '';\r\n  isdisabled = false;\r\n  isSecondary;\r\n  isPrimary;\r\n  isLink;\r\n  ghostText = false;\r\n  bgcolor = 'white';\r\n  noExist = false;\r\n  TextColor = '';\r\n\r\n  /**\r\n   * Buttons component ngOnInit\r\n   */\r\n  ngOnInit(): void {\r\n    // Empty ngOnInit\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  class=\"template-fluid\"\r\n  [ngClass]=\"{\r\n    'dark-theme': backgroundColor === '#000000',\r\n    'light-theme': backgroundColor === '#ffffff'\r\n  }\"\r\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n>\r\n  <button\r\n    mat-raised-button\r\n    [disabled]=\"isdisabled\"\r\n    [ngClass]=\"[\r\n      extraClass ? extraClass : '',\r\n      noExist ? 'btn-no-exist' : '',\r\n      isPrimary ? 'button--primary' : '',\r\n      isSecondary ? 'button--secondary' : '',\r\n      isLink ? 'button--link' : ''\r\n    ]\"\r\n  >\r\n    <span\r\n      class=\"icon-left\"\r\n      *ngIf=\"\r\n        extraClass == 'btn-large-icon btn-left' ||\r\n        extraClass == 'btn-small-icon btn-left'\r\n      \"\r\n    >\r\n      <svg\r\n        width=\"20\"\r\n        height=\"20\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fill-rule=\"evenodd\"\r\n          clip-rule=\"evenodd\"\r\n          d=\"M18.6552 1L1 9.09839H10.1954C10.3985 9.09839 10.5632 9.26307 10.5632 9.46621V18.6552L18.6552 1Z\"\r\n          stroke=\"white\"\r\n          stroke-width=\"1.47126\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        />\r\n      </svg>\r\n    </span>\r\n    <span\r\n      *ngIf=\"\r\n        extraClass !== 'btn-icon large-icon' &&\r\n        extraClass !== 'btn-icon small-icon'\r\n      \"\r\n    >\r\n      {{ text }}\r\n    </span>\r\n    <span\r\n      *ngIf=\"\r\n        extraClass == 'btn-large-icon btn-right' ||\r\n        extraClass == 'btn-small-icon btn-right' ||\r\n        extraClass == 'btn-icon large-icon' ||\r\n        extraClass == 'btn-icon small-icon'\r\n      \"\r\n      [ngClass]=\"[\r\n        extraClass == 'btn-large-icon btn-right'\r\n          ? 'icon-right'\r\n          : extraClass == 'btn-small-icon btn-right'\r\n          ? 'icon-right'\r\n          : '',\r\n        extraClass == 'btn-icon large-icon'\r\n          ? 'icon'\r\n          : extraClass == 'btn-icon small-icon'\r\n          ? 'icon'\r\n          : ''\r\n      ]\"\r\n    >\r\n      <svg\r\n        width=\"20\"\r\n        height=\"20\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fill-rule=\"evenodd\"\r\n          clip-rule=\"evenodd\"\r\n          d=\"M18.6552 1L1 9.09839H10.1954C10.3985 9.09839 10.5632 9.26307 10.5632 9.46621V18.6552L18.6552 1Z\"\r\n          stroke=\"white\"\r\n          stroke-width=\"1.47126\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        /></svg\r\n    ></span>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "CenteredCardComponent",
            "id": "component-CenteredCardComponent-001ec8a4bf0cfc5a8a322a3a6b76bead",
            "file": "libs/ui-library/src/lib/components/cards/centered-card/centered-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-centered-card",
            "styleUrls": [
                "./centered-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./centered-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardData",
                    "line": 10,
                    "type": "CENTERED_CARD"
                },
                {
                    "name": "isbordered",
                    "defaultValue": "false",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "isdarkTheme",
                    "defaultValue": "false",
                    "line": 12,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CENTERED_CARD } from '../../../interfaces/centered-card';\r\n\r\n@Component({\r\n  selector: 'lla-centered-card',\r\n  templateUrl: './centered-card.component.html',\r\n  styleUrls: ['./centered-card.component.scss'],\r\n})\r\nexport class CenteredCardComponent {\r\n  @Input() cardData: CENTERED_CARD;\r\n  @Input() isbordered?: boolean = false;\r\n  @Input() isdarkTheme?: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-layout-centered {\r\n    .card-layout {\r\n      width: 200px;\r\n      padding: 0px;\r\n      box-shadow: 1px 1px 4px 1px var(--grey-400);\r\n    }\r\n  \r\n    .card-layout-spacing {\r\n      padding: 8px 8px 0 8px;\r\n    }\r\n  \r\n    .card-layout img {\r\n      width: 200px;\r\n      height: 204px;\r\n    }\r\n  \r\n    .card-content {\r\n      text-align: center;\r\n      font-family: var(--InterRegular);\r\n      padding: 12px 20px 16px 20px;\r\n    }\r\n  \r\n    .card-title {\r\n      font-family: var(--InterBold);\r\n      font-size: 17px;\r\n      line-height: 20px;\r\n      padding: 5px;\r\n    }\r\n  \r\n    .card-tagline {\r\n      font-size: 13px;\r\n      line-height: 20px;\r\n      color: var(--grey-100);\r\n      padding: 5px;\r\n    }\r\n  \r\n    .card-price {\r\n      font-size: 13px;\r\n      line-height: 20px;\r\n    }\r\n  \r\n    .card-layout-dark {\r\n      background: var(--black-200);\r\n  \r\n      .card-tagline,\r\n      .card-price,\r\n      .card-title {\r\n        color: var(--white-900);\r\n      }\r\n    }\r\n  }\r\n  ",
                    "styleUrl": "./centered-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"card-layout-centered\">\r\n  <mat-card\r\n    class=\"card-layout\"\r\n    [ngClass]=\"{\r\n      'card-layout-spacing': isbordered,\r\n      'card-layout-dark': isdarkTheme\r\n    }\"\r\n  >\r\n    <img src=\"{{ cardData.imageUrl }}\" alt=\"{{ cardData.altText }}\" />\r\n    <div class=\"card-content\">\r\n      <div class=\"card-tagline\">{{ cardData.tagline }}</div>\r\n      <div class=\"card-title\">{{ cardData.title }}</div>\r\n      <div class=\"card-price\">{{ cardData.price }}</div>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-8717aaf1611a9b4f36090984e3e2a76c",
            "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "backgroundColor",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "caption",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "iserror",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isgroup",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isprimary",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "label",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "values",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "description": "<p>Alerts component ngOnInit</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n})\r\n/**\r\n * Checkbox component\r\n */\r\nexport class CheckboxComponent implements OnInit {\r\n  isChecked = false;\r\n  disabled = false;\r\n  backgroundColor;\r\n  isprimary;\r\n  isgroup;\r\n  iserror;\r\n  label;\r\n  caption;\r\n  values;\r\n  Arr = Array;\r\n  /**\r\n   * Alerts component ngOnInit\r\n   */\r\n  ngOnInit(): void {\r\n    // Empty ngOnInit\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div *ngIf=\"isprimary\">\r\n    <div\r\n      [ngClass]=\"[\r\n        backgroundColor == 'rgba(255,255,255,1)'\r\n          ? 'primary-checkbox'\r\n          : 'dark-checkbox'\r\n      ]\"\r\n    >\r\n      <p class=\"checkbox-caption\" *ngIf=\"caption\">Caption</p>\r\n      <mat-checkbox *ngIf=\"!isgroup\" [checked]=\"isChecked\" [disabled]=\"disabled\"\r\n        ><span class=\"mat-checkbox-label\" *ngIf=\"label\"\r\n          >Checkbox label</span\r\n        ></mat-checkbox\r\n      >\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"iserror\" class=\"error-checkbox\">\r\n    <p class=\"checkbox-caption\" *ngIf=\"caption\">Caption</p>\r\n    <mat-checkbox [checked]=\"isChecked\"\r\n      ><span class=\"mat-checkbox-label\" *ngIf=\"label\"\r\n        >Checkbox label</span\r\n      ></mat-checkbox\r\n    >\r\n  </div>\r\n  <div *ngIf=\"isgroup\" class=\"primary-checkbox\">\r\n    <p class=\"group-checkbox-caption checkbox-caption\" *ngIf=\"caption\">\r\n      Group caption\r\n    </p>\r\n    <mat-list>\r\n      <mat-list-item *ngFor=\"let item of Arr(values).fill(1); let i = index\">\r\n        <label class=\"checkbox-container\">\r\n          <input type=\"checkbox\" class=\"new-checkbox\" />\r\n          <span class=\"checkmark\"\r\n            ><span *ngIf=\"label\" class=\"mat-checkbox-label label-addon\">CheckBox {{i+1}}</span></span\r\n          ></label\r\n        >\r\n      </mat-list-item>\r\n    </mat-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ColorsComponent",
            "id": "component-ColorsComponent-2607ce28706bc5e55a738d7dd9c2ca71",
            "file": "libs/ui-library/src/lib/stories/atom/colors/colors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-colors",
            "styleUrls": [
                "./colors.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./colors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "bgcolorFlowPrimary",
                    "defaultValue": "['blue']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "bgcolorFlowSecondary",
                    "defaultValue": "['green', 'violent']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "bgcolorFlowTeritary",
                    "defaultValue": "['red', 'orange']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "bgcolorNeutral",
                    "defaultValue": "['grey']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "bgcolorVTRPrimary",
                    "defaultValue": "['pink']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "bgcolorVTRSecondary",
                    "defaultValue": "['blue', 'violent', 'lightBlue', 'paleCyan']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "bgcolorVTRTeritary",
                    "defaultValue": "['green', 'paleBlue', 'orange', 'red']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "btnCategory",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "opacity",
                    "defaultValue": "[\r\n    'C50',\r\n    'C100',\r\n    'C200',\r\n    'C300',\r\n    'C400',\r\n    'C500',\r\n    'C600',\r\n    'C700',\r\n    'C800',\r\n    'C900',\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "textAlignment",
                    "defaultValue": "'left'",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Input Parameters</p>\n",
                    "line": 21
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "transparency",
                    "defaultValue": "['OP8', 'OP16', 'OP24', 'OP32', 'OP40', 'OP48']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "description": "<p>OnInit Function, to store current selected Theme</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-colors',\r\n  templateUrl: './colors.component.html',\r\n  styleUrls: ['./colors.component.scss'],\r\n})\r\n/**\r\n * Color component\r\n */\r\nexport class ColorsComponent implements OnInit {\r\n  /**\r\n   * Color component constructor\r\n   */\r\n  constructor() {\r\n    // Empty constructor\r\n  }\r\n  /**\r\n   * Input Parameters\r\n   */\r\n  textAlignment = 'left';\r\n  opacity = [\r\n    'C50',\r\n    'C100',\r\n    'C200',\r\n    'C300',\r\n    'C400',\r\n    'C500',\r\n    'C600',\r\n    'C700',\r\n    'C800',\r\n    'C900',\r\n  ];\r\n  transparency = ['OP8', 'OP16', 'OP24', 'OP32', 'OP40', 'OP48'];\r\n  btnCategory: 'primary';\r\n  getTheme = 'VTR';\r\n  bgcolorVTRPrimary = ['pink'];\r\n  bgcolorVTRSecondary = ['blue', 'violent', 'lightBlue', 'paleCyan'];\r\n  bgcolorVTRTeritary = ['green', 'paleBlue', 'orange', 'red'];\r\n  bgcolorFlowPrimary = ['blue'];\r\n  bgcolorFlowSecondary = ['green', 'violent'];\r\n  bgcolorFlowTeritary = ['red', 'orange'];\r\n  bgcolorNeutral = ['grey'];\r\n  backgroundColor = '';\r\n  TextColor = '';\r\n  /**\r\n   * OnInit Function, to store current selected Theme\r\n   */\r\n  ngOnInit(): void {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".colorPallett {\r\n    margin: 50px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  .colorSet {\r\n    flex-basis: 45%;\r\n  }\r\n  .colorBox {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n  }\r\n  .colorInnerBox {\r\n    width: 48px;\r\n    height: 48px;\r\n    border-radius: 10px;\r\n    margin: 10px;\r\n  }\r\n  \r\n  .outlinedBox {\r\n    background-color: transparent !important;\r\n  }\r\n  .codeValue {\r\n    width: 10%;\r\n  }\r\n  .codeTransparent {\r\n    width: 20%;\r\n  }",
                    "styleUrl": "./colors.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Color component constructor</p>\n",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<article\r\n  class=\"template-fluid\"\r\n  [ngStyle]=\"{\r\n    'text-align': textAlignment,\r\n    'background-color': backgroundColor,\r\n    color: TextColor\r\n  }\"\r\n  [ngClass]=\"[btnCategory ? btnCategory : ' ']\"\r\n>\r\n  <section *ngIf=\"getTheme == 'VTR'\">\r\n    <section *ngIf=\"btnCategory == 'primary'\">\r\n      <div *ngFor=\"let primaryColor of bgcolorVTRPrimary\">\r\n        <h4>{{ primaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div [ngClass]=\"'colorInnerBox ' + op\"></div>\r\n              <div [ngClass]=\"'colorInnerBox outlinedBox ' + op\"></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'secondary'\">\r\n      <div *ngFor=\"let secondaryColor of bgcolorVTRSecondary\">\r\n        <h4>{{ secondaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'teritary'\">\r\n      <div *ngFor=\"let teritaryColor of bgcolorVTRTeritary\" class=\"colorSet\">\r\n        <h4>{{ teritaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'neutral'\">\r\n      <div *ngFor=\"let neutralColor of bgcolorNeutral\">\r\n        <h4>{{ neutralColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </section>\r\n  <section *ngIf=\"getTheme == 'Flow'\">\r\n    <section *ngIf=\"btnCategory == 'primary'\">\r\n      <div *ngFor=\"let primaryColor of bgcolorFlowPrimary\">\r\n        <h4>{{ primaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div [ngClass]=\"'colorInnerBox ' + op\"></div>\r\n              <div [ngClass]=\"'colorInnerBox outlinedBox ' + op\"></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'secondary'\">\r\n      <div *ngFor=\"let secondaryColor of bgcolorFlowSecondary\">\r\n        <h4>{{ secondaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'teritary'\">\r\n      <div *ngFor=\"let teritaryColor of bgcolorFlowTeritary\" class=\"colorSet\">\r\n        <h4>{{ teritaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'neutral'\">\r\n      <div *ngFor=\"let neutralColor of bgcolorNeutral\">\r\n        <h4>{{ secondaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </section>\r\n</article>\r\n"
        },
        {
            "name": "CtaCardComponent",
            "id": "component-CtaCardComponent-23c2ce0397fc791f9f5474997140cd71",
            "file": "libs/ui-library/src/lib/components/cards/cta-card/cta-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-cta-card",
            "styleUrls": [
                "./cta-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cta-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardData",
                    "line": 10,
                    "type": "CTA_CARD"
                },
                {
                    "name": "isbordered",
                    "defaultValue": "false",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "isdarkTheme",
                    "defaultValue": "false",
                    "line": 12,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport type { CTA_CARD } from '../../../interfaces/cta-card';\r\n\r\n@Component({\r\n  selector: 'lla-cta-card',\r\n  templateUrl: './cta-card.component.html',\r\n  styleUrls: ['./cta-card.component.scss'],\r\n})\r\nexport class CtaCardComponent {\r\n  @Input() cardData: CTA_CARD;\r\n  @Input() isbordered?: boolean = false;\r\n  @Input() isdarkTheme?: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-layout-cta {\r\n    .card-layout {\r\n      width: 340px;\r\n      padding: 0px;\r\n      box-shadow: 1px 1px 4px 1px var(--grey-400);\r\n    }\r\n  \r\n    .card-layout img {\r\n      width: 100%;\r\n      height: 180px;\r\n    }\r\n  \r\n    .card-layout-spacing {\r\n      padding: 8px 8px 0 8px;\r\n    }\r\n  \r\n    .card-title {\r\n      font-family: var(--InterBold);\r\n      font-size: 17px;\r\n      line-height: 20px;\r\n      padding-top: 16px;\r\n    }\r\n  \r\n    .card-placeholder {\r\n      font-family: var(--InterBold);\r\n      font-size: 17px;\r\n      line-height: 20px;\r\n    }\r\n  \r\n    .card-content {\r\n      padding: 0 20px;\r\n    }\r\n  \r\n    .card-caption {\r\n      font-family: var(--InterRegular);\r\n      font-size: 13px;\r\n      line-height: 20px;\r\n      padding-top: 8px;\r\n      color: var(--card-caption);\r\n    }\r\n  \r\n    .card-footer {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      padding-bottom: 10px;\r\n    }\r\n  \r\n    .card-price {\r\n      font-family: var(--InterRegular);\r\n      font-size: 15px;\r\n      line-height: 24px;\r\n      color: var(--black-200);\r\n    }\r\n  \r\n    .card-layout-cta-dark {\r\n      background: var(--black-200);\r\n  \r\n      .card-caption,\r\n      .card-title,\r\n      .card-placeholder,\r\n      .card-price {\r\n        color: var(--white-900);\r\n      }\r\n    }\r\n  }\r\n  ",
                    "styleUrl": "./cta-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"card-layout-cta\">\r\n  <mat-card\r\n    class=\"card-layout\"\r\n    [ngClass]=\"{\r\n      'card-layout-spacing': isbordered,\r\n      'card-layout-cta-dark': isdarkTheme\r\n    }\"\r\n  >\r\n    <img src=\"{{ cardData.imageUrl }}\" alt=\"{{ cardData.altText }}\" />\r\n    <div class=\"card-content\">\r\n      <div class=\"card-title\">{{ cardData.title }}</div>\r\n      <div class=\"card-placeholder\">{{ cardData.placeholder }}</div>\r\n      <div class=\"card-caption\">{{ cardData.caption }}</div>\r\n      <div class=\"card-footer\">\r\n        <div class=\"card-price\">{{ cardData.price }}</div>\r\n        <button mat-raised-button class=\"button--primary btn-small\">\r\n          {{ cardData.btnText }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-2ac530c9e848a8b8ba0c735f627a099c",
            "file": "libs/feature-library/src/lib/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss'],\r\n})\r\nexport class FooterComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>footer works!</p>\r\n"
        },
        {
            "name": "FullsizeCardComponent",
            "id": "component-FullsizeCardComponent-33d96c55098ff2c8ba39eceddc07c7c6",
            "file": "libs/ui-library/src/lib/components/cards/fullsize-card/fullsize-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-fullsize-card",
            "styleUrls": [
                "./fullsize-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fullsize-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardData",
                    "line": 13,
                    "type": "FULLSIZE_CARD"
                },
                {
                    "name": "cardVariant",
                    "line": 12,
                    "type": "CARD_VARIANT"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport type { FULLSIZE_CARD } from '../../../interfaces/fullsize-card';\r\n\r\ntype CARD_VARIANT = 'FULLSIZE' | 'FULLSIZECTA' | 'FULLSIZEPRICE';\r\n\r\n@Component({\r\n  selector: 'lla-fullsize-card',\r\n  templateUrl: './fullsize-card.component.html',\r\n  styleUrls: ['./fullsize-card.component.scss'],\r\n})\r\nexport class FullsizeCardComponent {\r\n  @Input() cardVariant: CARD_VARIANT;\r\n  @Input() cardData: FULLSIZE_CARD;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-layout-fullsize {\r\n  .card-layout {\r\n    width: 215px;\r\n    height: 200px;\r\n    padding: 0px;\r\n    position: relative;\r\n  }\r\n\r\n  .card-layout img {\r\n    width: 215px;\r\n    height: 200px;\r\n  }\r\n\r\n  .card-content {\r\n    position: absolute;\r\n    top: 12px;\r\n    left: 20px;\r\n  }\r\n\r\n  .card-title {\r\n    font-family: var(--InterRegular);\r\n    font-weight: bold;\r\n    font-size: 17px;\r\n    line-height: 20px;\r\n  }\r\n\r\n  .card-caption {\r\n    font-family: var(--InterRegular);\r\n    font-size: 13px;\r\n    color: var(--card-caption);\r\n  }\r\n}\r\n\r\n.card-layout-fullsize-cta {\r\n  .card-layout {\r\n    width: 215px;\r\n    height: 200px;\r\n    padding: 0px;\r\n    position: relative;\r\n  }\r\n\r\n  .card-layout img {\r\n    width: 215px;\r\n    height: 200px;\r\n  }\r\n\r\n  .card-content {\r\n    position: absolute;\r\n    left: 20px;\r\n    bottom: 19.84px;\r\n  }\r\n\r\n  .card-title {\r\n    font-family: var(--InterRegular);\r\n    font-family: 15px;\r\n    font-weight: bold;\r\n    height: 24px;\r\n  }\r\n}\r\n\r\n.card-layout-fullsize-price {\r\n  .card-layout {\r\n    width: 215px;\r\n    height: 200px;\r\n    padding: 0px;\r\n    position: relative;\r\n    box-shadow: 1px 1px 4px 1px var(--grey-400);\r\n  }\r\n\r\n  .card-layout img {\r\n    width: 215px;\r\n    height: 200px;\r\n  }\r\n\r\n  .card-title {\r\n    font-family: var(--InterRegular);\r\n    font-family: 15px;\r\n    font-weight: bold;\r\n    height: 22px;\r\n    position: absolute;\r\n    bottom: 19px;\r\n    left: 20px;\r\n  }\r\n\r\n  .card-price {\r\n    font-family: var(--InterRegular);\r\n    color: var(--card-caption);\r\n    height: 22px;\r\n    position: absolute;\r\n    bottom: 19px;\r\n    right: 20px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./fullsize-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div\r\n  [ngClass]=\"{\r\n    'card-layout-fullsize': cardVariant == 'FULLSIZE',\r\n    'card-layout-fullsize-cta': cardVariant == 'FULLSIZECTA',\r\n    'card-layout-fullsize-price': cardVariant == 'FULLSIZEPRICE'\r\n  }\"\r\n>\r\n  <mat-card class=\"card-layout\">\r\n    <img src=\"{{ cardData.imageUrl }}\" alt=\"{{ cardData.altText }}\" />\r\n    <div class=\"card-content\">\r\n      <div class=\"card-title\">{{ cardData.title }}</div>\r\n      <div class=\"card-caption\">\r\n        {{ cardData.caption }}\r\n      </div>\r\n      <button\r\n        *ngIf=\"cardVariant == 'FULLSIZECTA'\"\r\n        class=\"button--primary btn-small\"\r\n      >\r\n        {{ cardData.btnText }}\r\n      </button>\r\n      <div class=\"card-price\">\r\n        {{ cardData.price }}\r\n      </div>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "GridComponent",
            "id": "component-GridComponent-f3435684d6c2fb7d145be548239bb6cd",
            "file": "libs/ui-library/src/lib/stories/atom/grid/grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-grid",
            "styleUrls": [
                "./grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "cols",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "gridByBreakpoint",
                    "defaultValue": "{\r\n    xl: 12,\r\n    lg: 12,\r\n    md: 12,\r\n    sm: 8,\r\n    sml: 12,\r\n    xs: 4,\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "gutter",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "gutterSize",
                    "defaultValue": "{\r\n    sm: 16,\r\n    lg: 24,\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\n\r\n@Component({\r\n  selector: 'lla-grid',\r\n  templateUrl: './grid.component.html',\r\n  styleUrls: ['./grid.component.scss'],\r\n})\r\n/**\r\n * Grid component ngOnInit\r\n */\r\nexport class GridComponent {\r\n  cols: number;\r\n  gutter: number;\r\n  backgroundColor;\r\n\r\n  gridByBreakpoint = {\r\n    xl: 12,\r\n    lg: 12,\r\n    md: 12,\r\n    sm: 8,\r\n    sml: 12,\r\n    xs: 4,\r\n  };\r\n  gutterSize = {\r\n    sm: 16,\r\n    lg: 24,\r\n  };\r\n  /**\r\n   * Alerts component constructor\r\n   */\r\n  constructor(private breakpointObserver: BreakpointObserver) {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape,\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.matches) {\r\n          if (result.breakpoints[Breakpoints.XSmall]) {\r\n            this.cols = this.gridByBreakpoint.xs;\r\n            this.gutter = this.gutterSize.sm;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Small]) {\r\n            this.cols = this.gridByBreakpoint.sm;\r\n            this.gutter = this.gutterSize.sm;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Medium]) {\r\n            this.cols = this.gridByBreakpoint.md;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Large]) {\r\n            this.cols = this.gridByBreakpoint.lg;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.XLarge]) {\r\n            this.cols = this.gridByBreakpoint.xl;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.HandsetLandscape]) {\r\n            this.cols = this.gridByBreakpoint.sml;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Alerts component constructor</p>\n",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div\r\n  [ngClass]=\"{\r\n    'dark-theme': backgroundColor === '#000000',\r\n    'light-theme': backgroundColor === '#ffffff'\r\n  }\"\r\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n>\r\n  <div class=\"grid-wrapper\">\r\n    <mat-grid-list #grid [cols]=\"cols\" rowHeight=\"1:50\" [gutterSize]=\"gutter\">\r\n      <mat-grid-tile>1</mat-grid-tile>\r\n      <mat-grid-tile>2</mat-grid-tile>\r\n      <mat-grid-tile>3</mat-grid-tile>\r\n      <mat-grid-tile>4</mat-grid-tile>\r\n      <mat-grid-tile>5</mat-grid-tile>\r\n      <mat-grid-tile>6</mat-grid-tile>\r\n      <mat-grid-tile>7</mat-grid-tile>\r\n      <mat-grid-tile>8</mat-grid-tile>\r\n      <mat-grid-tile>9</mat-grid-tile>\r\n      <mat-grid-tile>10</mat-grid-tile>\r\n      <mat-grid-tile>11</mat-grid-tile>\r\n      <mat-grid-tile>12</mat-grid-tile>\r\n    </mat-grid-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-f2157f5df4cf4ac10305b52b5ff380ca",
            "file": "libs/feature-library/src/lib/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>header works!</p>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-003f870a70642487940109d094e1bcb3",
            "file": "apps/ubc-information/src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<lla-nav-bar></lla-nav-bar>\r\n<p>home component from ubc-information app</p>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-003f870a70642487940109d094e1bcb3-1",
            "file": "apps/ubc-pages/src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HomeComponent-1",
            "templateData": "<lla-nav-bar></lla-nav-bar>\r\n<p>Pages >> HOME COMPONENT</p>\r\n"
        },
        {
            "name": "IconsComponent",
            "id": "component-IconsComponent-69d0619ec3cd69c33696dbd289da700b",
            "file": "libs/ui-library/src/lib/stories/atom/icons/icons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-icons",
            "styleUrls": [
                "./icons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "fontColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "fontSize",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "iconClass",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "label",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "description": "<p>OnInit Function, to store current selected Theme</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-icons',\r\n  templateUrl: './icons.component.html',\r\n  styleUrls: ['./icons.component.scss'],\r\n})\r\n/**\r\n * Icons Component\r\n */\r\nexport class IconsComponent implements OnInit {\r\n  fontSize = '';\r\n  iconClass = '';\r\n  backgroundColor = '';\r\n  fontColor = '';\r\n  label = false;\r\n  /**\r\n   * Icons Component Construtor\r\n   */\r\n  constructor() {\r\n    // Empty Constructor\r\n  }\r\n  /**\r\n   * OnInit Function, to store current selected Theme\r\n   */\r\n  ngOnInit(): void {\r\n    // Empty Oninit\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icons.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Icons Component Construtor</p>\n",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div class=\"wrapper-icon\" [ngClass]=\"[fontSize ? fontSize : '']\">\r\n    <span\r\n      [ngClass]=\"[iconClass ? iconClass : '']\"\r\n      [ngStyle]=\"{ color: fontColor }\"\r\n    >\r\n    </span>\r\n    <span\r\n      *ngIf=\"label\"\r\n      class=\"description-icon\"\r\n      [ngStyle]=\"{ color: fontColor }\"\r\n      >Label</span\r\n    >\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ImgGalleryComponent",
            "id": "component-ImgGalleryComponent-205e60750aee86f9e1014dcd20778a27",
            "file": "libs/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-img-gallery",
            "styleUrls": [
                "./img-gallery.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./img-gallery.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "imageList",
                    "line": 17,
                    "type": "Iimages[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<null>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "columnCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "galleryDesignsAvailable",
                    "defaultValue": "[\r\n    [{ cols: 1, rows: 1 }],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 2 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "imgCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "layoutPatternPicked",
                    "type": "Imatrix[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "maxImageToBeShown",
                    "defaultValue": "6",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getColumnCount",
                    "args": [
                        {
                            "name": "imgCount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>Get the total number of grid columns.\nThe column count for 1 image will be 1.\nThe column count for 2 to 4 image will be 2.\nThe column count for more than 4 image will be 3.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "imgCount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLayoutPattern",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 81,
                    "description": "<p>Based on image count, decide to choose gallery pattern from the list of galleryDesignsAvailable\nPick galleryDesignsAvailable[count-1] if the image size is count.\nPick galleryDesignsAvailable[6] if the image size is more than 6.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "description": "<p>Initate the image gallery</p>\n"
                },
                {
                    "name": "onClickHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "description": "<p>On click handler for gallery</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, OnInit, EventEmitter } from '@angular/core';\r\n\r\nexport interface Iimages {\r\n  path: string;\r\n  altTag: string;\r\n}\r\nexport interface Imatrix {\r\n  cols: number;\r\n  rows: number;\r\n}\r\n@Component({\r\n  selector: 'lla-img-gallery',\r\n  templateUrl: './img-gallery.component.html',\r\n  styleUrls: ['./img-gallery.component.scss'],\r\n})\r\nexport class ImgGalleryComponent implements OnInit {\r\n  @Input() imageList: Iimages[];\r\n  @Output() clickHandler: EventEmitter<null> = new EventEmitter();\r\n  maxImageToBeShown = 6;\r\n  // Pattern to get the desired layout based on image count\r\n  galleryDesignsAvailable = [\r\n    [{ cols: 1, rows: 1 }],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 2 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n  ];\r\n  imgCount: number;\r\n  layoutPatternPicked: Imatrix[];\r\n  columnCount: number;\r\n\r\n  /**\r\n   * Initate the image gallery\r\n   */\r\n  ngOnInit(): void {\r\n    this.imgCount = this.imageList.length;\r\n    this.columnCount = this.getColumnCount(this.imgCount);\r\n    const pattern = this.getLayoutPattern();\r\n    this.layoutPatternPicked = this.galleryDesignsAvailable[pattern];\r\n  }\r\n  /**\r\n   * Get the total number of grid columns.\r\n   * The column count for 1 image will be 1.\r\n   * The column count for 2 to 4 image will be 2.\r\n   * The column count for more than 4 image will be 3.\r\n   */\r\n  getColumnCount(imgCount: number): number {\r\n    return imgCount >= 5 ? 3 : imgCount == 1 ? 1 : 2;\r\n  }\r\n  /**\r\n   * Based on image count, decide to choose gallery pattern from the list of galleryDesignsAvailable\r\n   * Pick galleryDesignsAvailable[count-1] if the image size is count.\r\n   * Pick galleryDesignsAvailable[6] if the image size is more than 6.\r\n   */\r\n  getLayoutPattern(): number {\r\n    return this.imgCount > this.maxImageToBeShown ? 5 : this.imgCount - 1;\r\n  }\r\n  /**\r\n   * On click handler for gallery\r\n   */\r\n  onClickHandler(): void {\r\n    this.clickHandler.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-grid-list {\r\n    width: 360px;\r\n    height: 240px;\r\n    position: relative;\r\n    padding-bottom: 0px !important;\r\n}\r\nmat-grid-tile, mat-grid-list {\r\n    background: var(--white-900);\r\n}\r\n.overlapText{\r\n    position: absolute;\r\n    color: var(--white-900);\r\n    font-size: 22px;\r\n    right: 12%;\r\n    top: 70%;\r\n    line-height: 26px;\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./img-gallery.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-grid-list [cols]=\"columnCount\">\r\n    <mat-grid-tile\r\n        *ngFor=\"let matrix of layoutPatternPicked;let i=index\" \r\n        [colspan]=\"matrix.cols\"\r\n        [rowspan]=\"matrix.rows\">\r\n        <img \r\n          [src]=\"imageList[i].path\" \r\n          alt=\"imageList[i].altTag\"/>   \r\n    </mat-grid-tile>\r\n    <span class=\"overlapText\" *ngIf=\"imgCount>6\" (click)=\"onClickHandler()\"> {{ imgCount-6 }} +</span>\r\n</mat-grid-list>\r\n  "
        },
        {
            "name": "InputCodeComponent",
            "id": "component-InputCodeComponent-a3b849c19387b3312685735d1e4614fc",
            "file": "libs/ui-library/src/lib/components/input-code/input-code.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-input-code",
            "styleUrls": [
                "./input-code.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-code.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "4",
                    "line": 16,
                    "type": "number"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "isReadOnly",
                    "defaultValue": "false",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "status",
                    "defaultValue": "'DEFAULT'",
                    "line": 18,
                    "type": "COMPENETSTATUS"
                },
                {
                    "name": "types",
                    "defaultValue": "'FILLIN'",
                    "line": 17,
                    "type": "COMPENETTYPE"
                }
            ],
            "outputsClass": [
                {
                    "name": "sendData",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter<string[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "userEnteredValue",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "isUserEntersData",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "description": "<p>Check if user enters a Numeric or Alpha character</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUserErasing",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "description": "<p>Check if user is deleting the pre-entered data</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputEntered",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "i",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "description": "<p>Converting text input to password input</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchToNextTab",
                    "args": [
                        {
                            "name": "i",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "description": "<p>Automatic switching to next input code</p>\n",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateParent",
                    "args": [
                        {
                            "name": "userEnteredValue",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "description": "<p>Emitting data to parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": "userEnteredValue",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\ntype COMPENETSTATUS = 'SUCCESS' | 'ERROR' | 'DEFAULT';\r\ntype COMPENETTYPE = 'FILLIN' | 'OUTLINE';\r\n\r\n@Component({\r\n  selector: 'lla-input-code',\r\n  templateUrl: './input-code.component.html',\r\n  styleUrls: ['./input-code.component.scss'],\r\n})\r\n\r\n/**\r\n * InputCodeComponent\r\n */\r\nexport class InputCodeComponent {\r\n  @Input() count?: number = 4;\r\n  @Input() types?: COMPENETTYPE = 'FILLIN';\r\n  @Input() status?: COMPENETSTATUS = 'DEFAULT';\r\n  @Input() isDisabled?: boolean = false;\r\n  @Input() isReadOnly?: boolean = false;\r\n  @Output() sendData: EventEmitter<string[]> = new EventEmitter();\r\n  userEnteredValue = [];\r\n  Arr = Array;\r\n  /**\r\n   * Input InputCodeComponent\r\n   */\r\n  constructor() {\r\n    // Empty constructor\r\n  }\r\n  /**\r\n   * Converting text input to password input\r\n   */\r\n  onInputEntered(event, i: number) {\r\n    this.userEnteredValue[i] = event.target.value;\r\n    if (this.isUserErasing(event)) {\r\n      document\r\n        .getElementById('mat-input-' + i.toString())\r\n        .setAttribute('type', 'text');\r\n    } else if (this.isUserEntersData(event)) {\r\n      // Coverting text type to password type after 300sec. Delay has been implemented for animation purpose.\r\n      setTimeout(() => {\r\n        document\r\n          .getElementById('mat-input-' + i.toString())\r\n          .setAttribute('type', 'password');\r\n      }, 300);\r\n      this.switchToNextTab(i);\r\n    }\r\n    this.updateParent(this.userEnteredValue);\r\n  }\r\n  /**\r\n   * Check if user is deleting the pre-entered data\r\n   */\r\n  isUserErasing(event): boolean {\r\n    return event.code == 'Backspace' || event.code == 'Delete' ? true : false;\r\n  }\r\n  /**\r\n   * Check if user enters a Numeric or Alpha character\r\n   */\r\n  isUserEntersData(event): boolean {\r\n    return event.code.slice(0, 5) == 'Digit' || event.code.slice(0, 3) == 'Key'\r\n      ? true\r\n      : false;\r\n  }\r\n  /**\r\n   * Automatic switching to next input code\r\n   */\r\n  switchToNextTab(i: number): void {\r\n    const j = i + 1;\r\n    if (j < this.count) {\r\n      document.getElementById('mat-input-' + j.toString()).focus();\r\n    }\r\n  }\r\n  /**\r\n   * Emitting data to parent component\r\n   */\r\n  updateParent(userEnteredValue: string[]): void {\r\n    if (userEnteredValue.length >= this.count) {\r\n      this.sendData.emit(userEnteredValue);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input-code.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Input InputCodeComponent</p>\n",
                "args": [],
                "line": 23
            },
            "templateData": "<div\r\n  class=\"inputCode\"\r\n  [ngClass]=\"(status | lowercase)\"\r\n>\r\n  <input\r\n    *ngFor=\"let item of Arr(count).fill(1); let i = index\"\r\n    (keyup)=\"onInputEntered($event, i)\"\r\n    class=\"mat-form-field-infix inputcode\"\r\n    [ngClass]=\"(types | lowercase)\"\r\n    [readonly]=\"isReadOnly\" \r\n    [disabled]=\"isDisabled\" \r\n    matInput\r\n    type=\"text\"\r\n    maxlength=\"1\"\r\n  />\r\n</div>\r\n"
        },
        {
            "name": "InputsComponent",
            "id": "component-InputsComponent-5c43084eaf6240a04fcfb2464a686508",
            "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-inputs",
            "styleUrls": [
                "./inputs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inputs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "affixTypes",
                    "defaultValue": "'$'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "hide",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "iconType",
                    "defaultValue": "'iconcopy'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "styles",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "types",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "description": ""
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-inputs',\r\n  templateUrl: './inputs.component.html',\r\n  styleUrls: ['./inputs.component.scss'],\r\n})\r\n/**\r\n * Input component\r\n */\r\nexport class InputsComponent implements OnInit {\r\n  /**\r\n   * Input component\r\n   */\r\n  constructor() {\r\n    // Empty constructor\r\n  }\r\n\r\n  active = [];\r\n  getTheme = 'VTR';\r\n  backgroundColor = '';\r\n  TextColor = '';\r\n  status = '';\r\n  size = '';\r\n  styles = '';\r\n  types = '';\r\n  hide = true;\r\n  isdisabled = false;\r\n  iconType = 'iconcopy';\r\n  affixTypes = '$';\r\n\r\n  /**\r\n   *\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./inputs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Input component</p>\n",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<article\r\n  class=\"template-fluid\"\r\n  [ngStyle]=\"{\r\n    'background-color': backgroundColor,\r\n    color: TextColor\r\n  }\"\r\n>\r\n  <div *ngIf=\"types != 'inputWithCode'\">\r\n    <p\r\n      [ngClass]=\"[status ? status : '', size ? size : '', styles ? styles : '']\"\r\n    >\r\n      <label class=\"inputLabel\"\r\n        ><strong>Label {{ status == 'required' ? '*' : '' }} </strong></label\r\n      ><br />\r\n      <mat-form-field appearance=\"standard\">\r\n        <div *ngIf=\"types == 'inputWithPassword'\">\r\n          <div class=\"icon-holder\">\r\n            <span class=\"icon-lock icon-placeholder\"></span>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"symbols\" *ngIf=\"types == 'Price'\">\r\n          <span class=\"icon-placeholder\" *ngIf=\"position == 'prefix'\">{{\r\n            affixTypes\r\n          }}</span>\r\n        </div>\r\n\r\n        <div *ngIf=\"types == 'inputWithPassword'\">\r\n          <input\r\n            matInput\r\n            [type]=\"hide ? 'password' : 'text'\"\r\n            [disabled]=\"status == 'disabled' ? true : false\"\r\n            [readonly]=\"status == 'readOnly' ? true : false\"\r\n            placeholder=\"Placeholder\"\r\n            class=\"inputBox\"\r\n            maxlength=\"size == 'large'? 24 : 18\"\r\n          />\r\n        </div>\r\n        <div *ngIf=\"types == 'inputWithPassword'\">\r\n          <div\r\n            class=\"icon-holder\"\r\n            (click)=\"hide = !hide\"\r\n            [attr.aria-label]=\"'Hide password'\"\r\n            [attr.aria-pressed]=\"hide\"\r\n          >\r\n            <span\r\n              class=\"display-icon icon-placeholder\"\r\n              [ngClass]=\"hide ? 'icon-eye-ouline' : 'icon-eye-off-ouline'\"\r\n              [ngStyle]=\"{ 'font-size': '30px' }\"\r\n            ></span>\r\n          </div>\r\n        </div>\r\n        <div\r\n          *ngIf=\"types != 'inputWithTextarea' && types != 'inputWithPassword'\"\r\n        >\r\n          <input\r\n            matInput\r\n            *ngIf=\"types == 'defaultInputs'\"\r\n            [disabled]=\"status == 'disabled' ? true : false\"\r\n            [readonly]=\"status == 'readOnly' ? true : false\"\r\n            placeholder=\"Placeholder\"\r\n            class=\"inputBox\"\r\n            maxlength=\"size == 'large'? 24 : 18\"\r\n          />\r\n          <div *ngIf=\"types == 'Price'\" class=\"no-spinner\">\r\n            <input\r\n              matInput\r\n              *ngIf=\"types == 'Price'\"\r\n              type=\"number\"\r\n              [disabled]=\"status == 'disabled' ? true : false\"\r\n              [readonly]=\"status == 'readOnly' ? true : false\"\r\n              placeholder=\"Placeholder\"\r\n              class=\"inputBox\"\r\n              maxlength=\"size == 'large'? 24 : 18\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"types == 'inputWithTextarea'\">\r\n          <textarea\r\n            matInput\r\n            class=\"inputTextArea\"\r\n            placeholder=\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum is simply.\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        <mat-hint\r\n          *ngIf=\"\r\n            status == 'default' ||\r\n            status == 'active' ||\r\n            status == 'disabled' ||\r\n            status == 'readOnly'\r\n          \"\r\n          >Assistive Text</mat-hint\r\n        >\r\n        <mat-hint *ngIf=\"status == 'success'\" class=\"toaster success-background\"\r\n          >Success Text</mat-hint\r\n        >\r\n        <mat-hint *ngIf=\"status == 'error'\" class=\"toaster error-background\"\r\n          >Error Text</mat-hint\r\n        >\r\n        <mat-hint *ngIf=\"status == 'required'\">Required*</mat-hint>\r\n\r\n        <div class=\"icon-holder\" *ngIf=\"types == 'defaultInputs'\">\r\n          <span\r\n            class=\"icon-placeholder\"\r\n            [ngClass]=\"[iconType ? iconType : '']\"\r\n          ></span>\r\n        </div>\r\n\r\n        <div class=\"symbols\" *ngIf=\"types == 'Price'\">\r\n          <span class=\"icon-placeholder\" *ngIf=\"position == 'suffix'\">{{\r\n            affixTypes\r\n          }}</span>\r\n        </div>\r\n      </mat-form-field>\r\n    </p>\r\n  </div>\r\n\r\n  <div *ngIf=\"types == 'inputWithCode'\">\r\n    <div\r\n      class=\"inputCode\"\r\n      [ngClass]=\"[status ? status : '', size ? size : '', styles ? styles : '']\"\r\n    >\r\n      <label class=\"inputLabel\"\r\n        ><strong>Label {{ status == 'required' ? '*' : '' }} </strong></label\r\n      ><br />\r\n      <div class=\"inputCodeBox\">\r\n        <div\r\n          class=\"mat-form-field-infix\"\r\n          *ngFor=\"let item of [].constructor(count); let i = index\"\r\n        >\r\n          <input\r\n            (keyup)=\"onInputEntry($event, i)\"\r\n            class=\"inputcode\"\r\n            [ngClass]=\"styles ? styles : ''\"\r\n            matInput\r\n            [type]=\"active[i] && active[i] == 'true' ? 'password' : 'text'\"\r\n            maxlength=\"1\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <mat-hint\r\n        *ngIf=\"\r\n          status == 'default' ||\r\n          status == 'active' ||\r\n          status == 'disabled' ||\r\n          status == 'readOnly'\r\n        \"\r\n        >Assistive Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'success'\" class=\"toaster success-background\"\r\n        >Success Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'error'\" class=\"toaster error-background\"\r\n        >Error Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'required'\">Required*</mat-hint>\r\n    </div>\r\n  </div>\r\n</article>\r\n"
        },
        {
            "name": "LandingComponent",
            "id": "component-LandingComponent-e042b344d41b15f4f623d36db12e16f5",
            "file": "apps/ubc-information/src/app/landing/landing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-landing",
            "styleUrls": [
                "./landing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-landing',\r\n  templateUrl: './landing.component.html',\r\n  styleUrls: ['./landing.component.scss'],\r\n})\r\nexport class LandingComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./landing.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<lla-nav-bar></lla-nav-bar>\r\n<p>Landig component from ubc-information</p>\r\n"
        },
        {
            "name": "LandingComponent",
            "id": "component-LandingComponent-af001ce73357bd8de39f6f7dd6f1c2bc-1",
            "file": "apps/ubc-pages/src/app/landing/landing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ubc-pages-landing",
            "styleUrls": [
                "./landing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ubc-pages-landing',\r\n  templateUrl: './landing.component.html',\r\n  styleUrls: ['./landing.component.scss'],\r\n})\r\nexport class LandingComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./landing.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LandingComponent-1",
            "templateData": "<lla-nav-bar></lla-nav-bar>\r\n<p>Pages >> LANDING COMPONENT</p>\r\n"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-bc902df4ccbac0489949838fbc40fb36",
            "file": "libs/ui-library/src/lib/stories/atom/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-list",
            "styleUrls": [
                "./list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "backgroundColor",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "horizontal",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "icon",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "list",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "description": "<p>List component NgOnInit</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n})\r\n/**\r\n * List Component\r\n */\r\nexport class ListComponent implements OnInit {\r\n  list;\r\n  backgroundColor;\r\n  icon = false;\r\n  horizontal = false;\r\n  Arr = Array;\r\n\r\n  /**\r\n   * List component NgOnInit\r\n   */\r\n  ngOnInit(): void {\r\n    // Empty ngOnInit\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div [ngClass]=\"[isDarkMode ? 'vtr-list-dark' : 'vtr-list-light']\">\r\n    <mat-list>\r\n      <div class=\"list-title\">Title List</div>\r\n      <div [ngClass]=\"horizontal ? 'list-items' : ''\">\r\n        <mat-list-item\r\n          class=\"list\"\r\n          *ngFor=\"let item of Arr(list); let i = index\"\r\n          ><div *ngIf=\"icon\" class=\"list-icons icon-folder\"></div>\r\n          <div>List item {{ i + 1 }}</div></mat-list-item\r\n        >\r\n      </div>\r\n    </mat-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LogoComponent",
            "id": "component-LogoComponent-28a669468599db4e2e74fcba699ad5dd",
            "file": "libs/ui-library/src/lib/components/logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-logo",
            "styleUrls": [
                "./logo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./logo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "altTag",
                    "defaultValue": "'logo'",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "imgPath",
                    "description": "<p>Logo parameters</p>\n",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter<null>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClickHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "description": "<p>To emit click event to parent component</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-logo',\r\n  templateUrl: './logo.component.html',\r\n  styleUrls: ['./logo.component.scss'],\r\n})\r\n/**\r\n * Logo Component\r\n */\r\nexport class LogoComponent {\r\n  /**\r\n   * Logo parameters\r\n   */\r\n  @Input() imgPath: string;\r\n  @Input() altTag?: string = 'logo';\r\n  @Output() clickHandler?: EventEmitter<null> = new EventEmitter();\r\n\r\n  /**\r\n   * Logo Component Constructor\r\n   */\r\n  constructor() {\r\n    // Empty constructor\r\n  }\r\n  /**\r\n   * To emit click event to parent component\r\n   */\r\n  onClickHandler() {\r\n    this.clickHandler.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./logo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Logo Component Constructor</p>\n",
                "args": [],
                "line": 17
            },
            "templateData": "<div class=\"logo\">\r\n  <img \r\n  [src]=\"imgPath\" \r\n  (click)=\"onClickHandler()\"\r\n  alt=\"altTag\" />\r\n</div>\r\n\r\n\r\n\r\n\r\n"
        },
        {
            "name": "NavBarComponent",
            "id": "component-NavBarComponent-da9c6e06e8fdf0847e6ede15d2dc3ed4",
            "file": "apps/ubc-information/src/app/nav-bar/nav-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-nav-bar",
            "styleUrls": [
                "./nav-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n@Component({\r\n  selector: 'lla-nav-bar',\r\n  templateUrl: './nav-bar.component.html',\r\n  styleUrls: ['./nav-bar.component.scss'],\r\n})\r\nexport class NavBarComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./nav-bar.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<a routerLink=\"/information/landing\" >landing</a>  | \r\n<a routerLink=\"/information/home\" >home</a>"
        },
        {
            "name": "NavBarComponent",
            "id": "component-NavBarComponent-13c6207c43cb6746a6f135ab377294ac-1",
            "file": "apps/ubc-pages/src/app/nav-bar/nav-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-nav-bar",
            "styleUrls": [
                "./nav-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-nav-bar',\r\n  templateUrl: './nav-bar.component.html',\r\n  styleUrls: ['./nav-bar.component.scss'],\r\n})\r\nexport class NavBarComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./nav-bar.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NavBarComponent-1",
            "templateData": "<a routerLink=\"/pages/landing\" >landing</a>  | \r\n<a routerLink=\"/pages/home\" >home</a>"
        },
        {
            "name": "NavBarComponent",
            "id": "component-NavBarComponent-13c6207c43cb6746a6f135ab377294ac-2",
            "file": "apps/ubc-shell/src/app/nav-bar/nav-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-nav-bar",
            "styleUrls": [
                "./nav-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-nav-bar',\r\n  templateUrl: './nav-bar.component.html',\r\n  styleUrls: ['./nav-bar.component.scss'],\r\n})\r\nexport class NavBarComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./nav-bar.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "NavBarComponent-2",
            "templateData": "<a routerLink=\"/information\" >UbcInformation</a>  | \r\n<a routerLink=\"/pages\" >UbcPages</a>"
        },
        {
            "name": "PlansCardComponent",
            "id": "component-PlansCardComponent-99ff2a1598ba24fa43d30d16ccca1715",
            "file": "libs/ui-library/src/lib/components/cards/plans-card/plans-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-plans-card",
            "styleUrls": [
                "./plans-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plans-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardData",
                    "line": 10,
                    "type": "PLANS_CARD"
                },
                {
                    "name": "isbordered",
                    "defaultValue": "false",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "isdarkTheme",
                    "defaultValue": "false",
                    "line": 12,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport type { PLANS_CARD } from '../../../interfaces/plans-card';\r\n\r\n@Component({\r\n  selector: 'lla-plans-card',\r\n  templateUrl: './plans-card.component.html',\r\n  styleUrls: ['./plans-card.component.scss'],\r\n})\r\nexport class PlansCardComponent {\r\n  @Input() cardData: PLANS_CARD;\r\n  @Input() isbordered?: boolean = false;\r\n  @Input() isdarkTheme?: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-layout-plans {\r\n  .card-layout {\r\n    width: 340px;\r\n    padding: 0px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    box-shadow: 1px 1px 4px 1px var(--grey-400);\r\n  }\r\n\r\n  .card-layout img {\r\n    width: 100%;\r\n  }\r\n  .card-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 27px 32px 0 35px;\r\n  }\r\n\r\n  .features {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 15px;\r\n  }\r\n\r\n  .title {\r\n    font-family: var(--InterRegular);\r\n    font-weight: bold;\r\n    font-size: 17px;\r\n    line-height: 20px;\r\n  }\r\n\r\n  .subtitle {\r\n    font-family: var(--InterRegular);\r\n    font-size: 13px;\r\n    line-height: 20px;\r\n  }\r\n\r\n  .card-footer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 23px 43px 15px 48px;\r\n  }\r\n\r\n  .card-price {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  .circle {\r\n    width: 24px;\r\n    height: 24px;\r\n    border-radius: 12px;\r\n    background: var(--placeholder-color);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 10px;\r\n\r\n    [class^='icon-'],\r\n    [class*=' icon-'] {\r\n      color: var(--white-900);\r\n      font-size: 12px;\r\n      text-align: center;\r\n    }\r\n  }\r\n\r\n  .dollar {\r\n    color: var(--blue-1000);\r\n    font-family: var(--InterRegular);\r\n    font-weight: 600;\r\n    font-size: 22px;\r\n    line-height: 32px;\r\n    margin-right: 9px;\r\n  }\r\n\r\n  .price {\r\n    color: var(--blue-1000);\r\n    font-size: 34px;\r\n    font-family: var(--InterRegular);\r\n    line-height: 41.15px;\r\n    font-weight: 700;\r\n    margin-right: 23px;\r\n  }\r\n\r\n  .card-months {\r\n    font-family: var(--InterRegular);\r\n    font-size: 16px;\r\n    line-height: 16px;\r\n    font-weight: 700;\r\n    color: var(--black-200);\r\n    opacity: 40%;\r\n  }\r\n\r\n  .months {\r\n    text-align: center;\r\n  }\r\n\r\n  .normal-price {\r\n    color: var(--grey-200);\r\n    font-size: 15px;\r\n    font-family: var(--InterRegular);\r\n    font-weight: 600;\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .card-btn {\r\n    margin: 0 auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-bottom: 23px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./plans-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"card-layout-plans\">\r\n  <mat-card class=\"card-layout\">\r\n    <img src=\"{{ cardData.imageUrl }}\" alt=\"{{ cardData.altText }}\" />\r\n    <div class=\"card-content\">\r\n      <div class=\"features\" *ngFor=\"let item of cardData.planContent\">\r\n        <div class=\"circle\"><span class=\"{{ cardData.icon }}\"></span></div>\r\n        <div class=\"content\">\r\n          <div class=\"title\">{{ item.text }}</div>\r\n          <div class=\"subtitle\">{{ item.label }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n      <div class=\"card-price\">\r\n        <span class=\"dollar\">{{ cardData.currency }}</span>\r\n        <span class=\"price\">{{ cardData.price }}</span>\r\n      </div>\r\n      <div class=\"card-months\">\r\n        <div class=\"months\">{{ cardData.priceTerms }}</div>\r\n        <div>{{ cardData.subPriceTerms }}</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"normal-price\">{{ cardData.normalPrice }}</div>\r\n    <button class=\"button--primary btn-large card-btn\">\r\n      {{ cardData.btnText }}\r\n    </button>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "RadiobuttonComponent",
            "id": "component-RadiobuttonComponent-81ca399f38f58302228ad086052c1aa9",
            "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-radiobutton",
            "styleUrls": [
                "./radiobutton.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radiobutton.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "caption",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "disabled",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "horizontal",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Radio Button component constructor</p>\n",
                    "line": 25
                },
                {
                    "name": "iserror",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isgroup",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isprimary",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "label",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "values",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "description": "<p>Radio Button component constructor</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-radiobutton',\r\n  templateUrl: './radiobutton.component.html',\r\n  styleUrls: ['./radiobutton.component.scss'],\r\n})\r\n/**\r\n * Radio Button component constructor\r\n */\r\nexport class RadiobuttonComponent implements OnInit {\r\n  backgroundColor = '';\r\n  isprimary = false;\r\n  iserror = false;\r\n  isgroup = false;\r\n  label;\r\n  horizontal;\r\n  caption;\r\n  disabled;\r\n  values;\r\n  Arr = Array;\r\n  /**\r\n   * Radio Button component constructor\r\n   */\r\n  isChecked = false;\r\n  /**\r\n   * Radio Button component constructor\r\n   */\r\n  constructor() {\r\n    // Empty constructor\r\n  }\r\n  /**\r\n   * Radio Button component constructor\r\n   */\r\n  ngOnInit(): void {\r\n    // Empty function\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radiobutton.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Radio Button component constructor</p>\n",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div\r\n    *ngIf=\"isprimary\"\r\n    [ngClass]=\"[\r\n      backgroundColor == 'rgba(255,255,255,1)'\r\n        ? 'primary-radiobutton'\r\n        : 'dark-radiobutton'\r\n    ]\"\r\n  >\r\n    <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n    <mat-radio-group>\r\n      <mat-radio-button value=\"1\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span> </mat-radio-button\r\n      ><span *ngIf=\"horizontal\">&nbsp;&nbsp;</span><br *ngIf=\"!horizontal\" /><br\r\n        *ngIf=\"!horizontal\"\r\n      />\r\n      <mat-radio-button value=\"2\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span>\r\n      </mat-radio-button>\r\n    </mat-radio-group>\r\n  </div>\r\n  <div class=\"error-radiobutton\" *ngIf=\"iserror\">\r\n    <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n    <mat-radio-group>\r\n      <mat-radio-button value=\"1\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span> </mat-radio-button\r\n      ><span *ngIf=\"horizontal\">&nbsp;&nbsp;</span><br *ngIf=\"!horizontal\" /><br\r\n        *ngIf=\"!horizontal\"\r\n      />\r\n      <mat-radio-button value=\"2\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span>\r\n      </mat-radio-button>\r\n    </mat-radio-group>\r\n  </div>\r\n  <div *ngIf=\"isgroup\" class=\"primary-radiobutton\">\r\n    <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n    <mat-list>\r\n      <mat-list-item *ngFor=\"let item of Arr(values).fill(1); let i = index\">\r\n        <label class=\"radio-container\">\r\n          <span *ngIf=\"label\">Radio Button {{i+1}}</span>\r\n          <input type=\"radio\" name=\"radio\" [id]=\"i\" />\r\n          <span class=\"radio-checkmark\"></span>\r\n        </label>\r\n      </mat-list-item>\r\n    </mat-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "StoryAlertComponent",
            "id": "component-StoryAlertComponent-80c1f8c864d1bda6e3f57ef500e76fea",
            "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-alert",
            "styleUrls": [
                "./alert.scss"
            ],
            "styles": [],
            "template": "<div   class=\"template-fluid\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   <lla-alert\n     (clickHandler)=\"toggleAlert()\"\n     [type]=\"size\"\n     [opacity]=\"opacity\"\n     [status]=\"status\"\n     [title]=\"title\"\n     [body]=\"body\"\n   ></lla-alert>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "body",
                    "defaultValue": "'test'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "opacity",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "title",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "description": "<p>StoryLogoComponent</p>\n"
                },
                {
                    "name": "toggleAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "description": "<p>Toggle alert</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-alert',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <lla-alert\r\n      (clickHandler)=\"toggleAlert()\"\r\n      [type]=\"size\"\r\n      [opacity]=\"opacity\"\r\n      [status]=\"status\"\r\n      [title]=\"title\"\r\n      [body]=\"body\"\r\n    ></lla-alert>\r\n  </div>`,\r\n  styleUrls: ['./alert.scss'],\r\n})\r\n/**\r\n * StoryLogoComponent\r\n */\r\nexport default class StoryAlertComponent {\r\n  backgroundColor = '';\r\n  getTheme = 'VTR';\r\n  status = '';\r\n  body = 'test';\r\n  size = '';\r\n  opacity = '';\r\n  title;\r\n\r\n  /**\r\n   * StoryLogoComponent\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle alert\r\n   */\r\n  toggleAlert() {\r\n    return null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./alert.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "StoryalertPageComponent",
            "id": "component-StoryalertPageComponent-46321bcd52c4293e714fa85b977202a2",
            "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-alert-page",
            "styleUrls": [
                "./alertPage.scss"
            ],
            "styles": [],
            "template": "<div   class=\"template-fluid\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   <button\n     mat-raised-button\n     class=\"button--primary btn-small\"\n     (click)=\"toggleAlert()\"\n   >\n     click\n   </button>\n   <lla-alert\n     *ngIf=\"alertToggle\"\n     (clickHandler)=\"toggleAlert()\"\n     [type]=\"size\"\n     [opacity]=\"opacity\"\n     [status]=\"status\"\n     [title]=\"title\"\n     [body]=\"body\"\n   ></lla-alert>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertToggle",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "body",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "title",
                    "defaultValue": "'Success'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "description": "<p>StoryLogoComponent</p>\n"
                },
                {
                    "name": "toggleAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "description": "<p>Toggle alert</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-alert-page',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <button\r\n      mat-raised-button\r\n      class=\"button--primary btn-small\"\r\n      (click)=\"toggleAlert()\"\r\n    >\r\n      click\r\n    </button>\r\n    <lla-alert\r\n      *ngIf=\"alertToggle\"\r\n      (clickHandler)=\"toggleAlert()\"\r\n      [type]=\"size\"\r\n      [opacity]=\"opacity\"\r\n      [status]=\"status\"\r\n      [title]=\"title\"\r\n      [body]=\"body\"\r\n    ></lla-alert>\r\n  </div>`,\r\n  styleUrls: ['./alertPage.scss'],\r\n})\r\n/**\r\n * StoryLogoPageComponent\r\n */\r\nexport default class StoryalertPageComponent {\r\n  backgroundColor = '';\r\n  getTheme = 'VTR';\r\n  status = '';\r\n  title = 'Success';\r\n  body = '';\r\n  alertToggle = false;\r\n  size = 'default';\r\n  /**\r\n   * Toggle alert\r\n   */\r\n  toggleAlert(): void {\r\n    this.alertToggle = !this.alertToggle;\r\n  }\r\n  /**\r\n   * StoryLogoComponent\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./alertPage.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "StorybreadCrumbComponent",
            "id": "component-StorybreadCrumbComponent-c7c490a8a41f69566e709d6e56d9b2a5",
            "file": "libs/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-breadcrumb",
            "styleUrls": [
                "./breadcrumb.scss"
            ],
            "styles": [],
            "template": "<article    class=\"template-fluid\"\n    [ngStyle]=\"{\n      'background-color': backgroundColor\n    }\"\n  >\n    <lla-breadcrumb\n      (clickHandler)=\"navigatePage($event)\"\n      [breadCrumb]=\"breadCrumb\"\n      [isDarkMode]=\"isDarkMode\"\n    ></lla-breadcrumb>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "navigatePage",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 762,
                                "end": 766,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 756,
                                "end": 761,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "description": "<p>To get the current theme from storybook</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-breadcrumb',\r\n  template: `<article\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{\r\n      'background-color': backgroundColor\r\n    }\"\r\n  >\r\n    <lla-breadcrumb\r\n      (clickHandler)=\"navigatePage($event)\"\r\n      [breadCrumb]=\"breadCrumb\"\r\n      [isDarkMode]=\"isDarkMode\"\r\n    ></lla-breadcrumb>\r\n  </article>`,\r\n  styleUrls: ['./breadcrumb.scss'],\r\n})\r\n/**\r\n * StoryinputCodeComponent\r\n */\r\nexport default class StorybreadCrumbComponent {\r\n  getTheme = 'VTR';\r\n  /**\r\n   * To get the current theme from storybook\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n  /**\r\n   *\r\n   * @param data\r\n   */\r\n  navigatePage(data) {\r\n    console.log(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "StoryCardComponent",
            "id": "component-StoryCardComponent-6d1038fd669f1b187d9a14127646dbf8",
            "file": "libs/ui-library/src/lib/stories/molecule/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-cards",
            "styleUrls": [
                "./card.scss"
            ],
            "styles": [],
            "template": "<div    [ngClass]=\"[gridSize ? gridSize : '']\"\n    [ngStyle]=\"{\n      'background-color': backgroundColor\n    }\"\n  >\n    <lla-centered-card\n      *ngIf=\"centeredCard\"\n      [cardData]=\"cardData\"\n      [isbordered]=\"isbordered\"\n      [isdarkTheme]=\"isdarkTheme\"\n    ></lla-centered-card>\n    <lla-cta-card *ngIf=\"ctaCard\" [cardData]=\"cardData\"></lla-cta-card>\n    <lla-fullsize-card\n      *ngIf=\"fullsizeCard\"\n      [cardData]=\"cardData\"\n      [cardVariant]=\"cardVariant\"\n    ></lla-fullsize-card>\n    <lla-plans-card *ngIf=\"plansCard\" [cardData]=\"cardData\"></lla-plans-card>\n    <lla-wide-card *ngIf=\"wideCard\" [cardData]=\"cardData\"></lla-wide-card>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardData",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "gridSize",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "isbordered",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "isdarkTheme",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "description": "<p>To get the current theme from storybook</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nexport interface CENTERED_CARD {\r\n    tagline?: string;\r\n    imageUrl?: string;\r\n    title?: string;\r\n    altText?: string;\r\n    price?: string;\r\n  }\r\n\r\n@Component({\r\n  selector: 'storybook-cards',\r\n  template: `<div\r\n    [ngClass]=\"[gridSize ? gridSize : '']\"\r\n    [ngStyle]=\"{\r\n      'background-color': backgroundColor\r\n    }\"\r\n  >\r\n    <lla-centered-card\r\n      *ngIf=\"centeredCard\"\r\n      [cardData]=\"cardData\"\r\n      [isbordered]=\"isbordered\"\r\n      [isdarkTheme]=\"isdarkTheme\"\r\n    ></lla-centered-card>\r\n    <lla-cta-card *ngIf=\"ctaCard\" [cardData]=\"cardData\"></lla-cta-card>\r\n    <lla-fullsize-card\r\n      *ngIf=\"fullsizeCard\"\r\n      [cardData]=\"cardData\"\r\n      [cardVariant]=\"cardVariant\"\r\n    ></lla-fullsize-card>\r\n    <lla-plans-card *ngIf=\"plansCard\" [cardData]=\"cardData\"></lla-plans-card>\r\n    <lla-wide-card *ngIf=\"wideCard\" [cardData]=\"cardData\"></lla-wide-card>\r\n  </div>`,\r\n  styleUrls: ['./card.scss'],\r\n})\r\n/**\r\n * StoryinputCodeComponent\r\n */\r\nexport default class StoryCardComponent {\r\n  getTheme = 'VTR';\r\n  gridSize = '';\r\n  isbordered = true;\r\n  isdarkTheme = true;\r\n  cardData = [];\r\n  /**\r\n   * To get the current theme from storybook\r\n   */\r\n  constructor(private breakpointObserver: BreakpointObserver) {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape,\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.matches) {\r\n          if (result.breakpoints[Breakpoints.XSmall]) {\r\n            this.gridSize = 'XS';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Small]) {\r\n            this.gridSize = 'SM';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Medium]) {\r\n            this.gridSize = 'MD';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Large]) {\r\n            this.gridSize = 'LG';\r\n          }\r\n          if (result.breakpoints[Breakpoints.XLarge]) {\r\n            this.gridSize = 'XL';\r\n          }\r\n          if (result.breakpoints[Breakpoints.HandsetLandscape]) {\r\n            this.gridSize = 'SML';\r\n          }\r\n        }\r\n      });\r\n  }\r\n  /**\r\n   * To get the current theme from storybook\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".XS .card-layout-cta {\r\n    .card-layout {\r\n      width: 200px !important;\r\n    }\r\n  \r\n    .card-layout img {\r\n      width: 200px !important;\r\n    }\r\n  }\r\n  .XS  .card-layout-plans .card-layout {\r\n    width: 200px !important;\r\n  }\r\n  .XS  .card-layout-plans .card-layout img{\r\n    width: 200px !important;\r\n  }\r\n  .card-layout-centered .card-tagline{\r\n    padding: 5px;\r\n}\r\n.card-layout-centered .card-title {\r\n    padding: 5px;\r\n}\r\n\r\n  ",
                    "styleUrl": "./card.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>To get the current theme from storybook</p>\n",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoryImgGalleryComponent",
            "id": "component-StoryImgGalleryComponent-7a5d244606d712f172b4429d9c17515b",
            "file": "libs/ui-library/src/lib/stories/molecule/img gallery/imgGallery.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-imgGallery",
            "styleUrls": [
                "./imgGallery.scss"
            ],
            "styles": [],
            "template": "<div   [ngClass]=\"[gridSize ? gridSize : '']\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   <lla-img-gallery\n     *ngIf=\"count == 1\"\n     [imageList]=\"imageList.slice(0, this.count)\"\n   >\n   </lla-img-gallery>\n   <lla-img-gallery *ngIf=\"count == 2\" [imageList]=\"imageList.slice(0, 2)\">\n   </lla-img-gallery>\n   <lla-img-gallery *ngIf=\"count == 3\" [imageList]=\"imageList.slice(0, 3)\">\n   </lla-img-gallery>\n   <lla-img-gallery *ngIf=\"count == 4\" [imageList]=\"imageList.slice(0, 4)\">\n   </lla-img-gallery>\n   <lla-img-gallery *ngIf=\"count == 5\" [imageList]=\"imageList.slice(0, 5)\">\n   </lla-img-gallery>\n   <lla-img-gallery *ngIf=\"count == 6\" [imageList]=\"imageList.slice(0, 6)\">\n   </lla-img-gallery>\n   <lla-img-gallery\n     *ngIf=\"count == 7\"\n     (clickHandler)=\"handleClick()\"\n     [imageList]=\"imageList.slice(0, 7)\"\n   >\n   </lla-img-gallery>\n   <lla-img-gallery\n     *ngIf=\"count == 8\"\n     (clickHandler)=\"handleClick()\"\n     [imageList]=\"imageList.slice(0, 8)\"\n   >\n   </lla-img-gallery>\n   <lla-img-gallery\n     *ngIf=\"count == 9\"\n     (clickHandler)=\"handleClick()\"\n     [imageList]=\"imageList.slice(0, 9)\"\n   >\n   </lla-img-gallery>\n   <lla-img-gallery\n     *ngIf=\"count == 10\"\n     (clickHandler)=\"handleClick()\"\n     [imageList]=\"imageList.slice(0, 10)\"\n   >\n   </lla-img-gallery>\n   <lla-img-gallery\n     *ngIf=\"count == 11\"\n     (clickHandler)=\"handleClick()\"\n     [imageList]=\"imageList.slice(0, 11)\"\n   >\n   </lla-img-gallery>\n   <!-- The Modal -->\n   <div id=\"myModal\" class=\"modal\">\n     <div class=\"modal-content\">\n       <div class=\"gallery-modal\">\n         <span class=\"close\">&times;</span>\n         <lla-img-gallery [imageList]=\"imageList.slice(0, 7)\">\n         </lla-img-gallery>\n       </div>\n     </div>\n   </div>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "altContent",
                    "defaultValue": "'logo'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "count",
                    "defaultValue": "5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "line": 78,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "gridSize",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "imageList",
                    "defaultValue": "this.imageListVTR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "imageListFlow",
                    "defaultValue": "[\r\n    { altTag: 'img1', path: './flow/sampleImg.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg1.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg2.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg3.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg4.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg5.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg1.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg2.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg3.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg4.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg5.png' },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "imageListVTR",
                    "defaultValue": "[\r\n    { altTag: 'img1', path: './vtr/sampleImg.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg1.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg2.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg3.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg4.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg5.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg1.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg2.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg3.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg4.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg5.png' },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "showPOP",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                }
            ],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "description": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "description": "<p>StoryLogoComponent</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\n@Component({\r\n  selector: 'storybook-imgGallery',\r\n  template: ` <div\r\n    [ngClass]=\"[gridSize ? gridSize : '']\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <lla-img-gallery\r\n      *ngIf=\"count == 1\"\r\n      [imageList]=\"imageList.slice(0, this.count)\"\r\n    >\r\n    </lla-img-gallery>\r\n    <lla-img-gallery *ngIf=\"count == 2\" [imageList]=\"imageList.slice(0, 2)\">\r\n    </lla-img-gallery>\r\n    <lla-img-gallery *ngIf=\"count == 3\" [imageList]=\"imageList.slice(0, 3)\">\r\n    </lla-img-gallery>\r\n    <lla-img-gallery *ngIf=\"count == 4\" [imageList]=\"imageList.slice(0, 4)\">\r\n    </lla-img-gallery>\r\n    <lla-img-gallery *ngIf=\"count == 5\" [imageList]=\"imageList.slice(0, 5)\">\r\n    </lla-img-gallery>\r\n    <lla-img-gallery *ngIf=\"count == 6\" [imageList]=\"imageList.slice(0, 6)\">\r\n    </lla-img-gallery>\r\n    <lla-img-gallery\r\n      *ngIf=\"count == 7\"\r\n      (clickHandler)=\"handleClick()\"\r\n      [imageList]=\"imageList.slice(0, 7)\"\r\n    >\r\n    </lla-img-gallery>\r\n    <lla-img-gallery\r\n      *ngIf=\"count == 8\"\r\n      (clickHandler)=\"handleClick()\"\r\n      [imageList]=\"imageList.slice(0, 8)\"\r\n    >\r\n    </lla-img-gallery>\r\n    <lla-img-gallery\r\n      *ngIf=\"count == 9\"\r\n      (clickHandler)=\"handleClick()\"\r\n      [imageList]=\"imageList.slice(0, 9)\"\r\n    >\r\n    </lla-img-gallery>\r\n    <lla-img-gallery\r\n      *ngIf=\"count == 10\"\r\n      (clickHandler)=\"handleClick()\"\r\n      [imageList]=\"imageList.slice(0, 10)\"\r\n    >\r\n    </lla-img-gallery>\r\n    <lla-img-gallery\r\n      *ngIf=\"count == 11\"\r\n      (clickHandler)=\"handleClick()\"\r\n      [imageList]=\"imageList.slice(0, 11)\"\r\n    >\r\n    </lla-img-gallery>\r\n    <!-- The Modal -->\r\n    <div id=\"myModal\" class=\"modal\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"gallery-modal\">\r\n          <span class=\"close\">&times;</span>\r\n          <lla-img-gallery [imageList]=\"imageList.slice(0, 7)\">\r\n          </lla-img-gallery>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>`,\r\n  styleUrls: ['./imgGallery.scss'],\r\n})\r\n/**\r\n * StoryLogoComponent\r\n */\r\nexport default class StoryImgGalleryComponent {\r\n  gridSize = '';\r\n  /**\r\n   *\r\n   * @param dialog\r\n   */\r\n  constructor(\r\n    public dialog: MatDialog,\r\n    private breakpointObserver: BreakpointObserver\r\n  ) {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape,\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.matches) {\r\n          if (result.breakpoints[Breakpoints.XSmall]) {\r\n            this.gridSize = 'XS';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Small]) {\r\n            this.gridSize = 'SM';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Medium]) {\r\n            this.gridSize = 'MD';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Large]) {\r\n            this.gridSize = 'LG';\r\n          }\r\n          if (result.breakpoints[Breakpoints.XLarge]) {\r\n            this.gridSize = 'XL';\r\n          }\r\n          if (result.breakpoints[Breakpoints.HandsetLandscape]) {\r\n            this.gridSize = 'SML';\r\n          }\r\n        }\r\n      });\r\n  }\r\n  backgroundColor = '';\r\n  getTheme = 'VTR';\r\n  altContent = 'logo';\r\n  count = 5;\r\n  showPOP = false;\r\n  imageListVTR = [\r\n    { altTag: 'img1', path: './vtr/sampleImg.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg1.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg2.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg3.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg4.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg5.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg1.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg2.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg3.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg4.png' },\r\n    { altTag: 'img1', path: './vtr/sampleImg5.png' },\r\n  ];\r\n  imageListFlow = [\r\n    { altTag: 'img1', path: './flow/sampleImg.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg1.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg2.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg3.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg4.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg5.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg1.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg2.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg3.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg4.png' },\r\n    { altTag: 'img1', path: './flow/sampleImg5.png' },\r\n  ];\r\n  imageList = this.imageListVTR;\r\n\r\n  /**\r\n   * StoryLogoComponent\r\n   */\r\n  ngOnInit() {\r\n    console.log(this.count);\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n      if (this.getTheme == 'Flow') {\r\n        this.imageList = this.imageListFlow;\r\n      }\r\n      if (this.getTheme == 'VTR') {\r\n        this.imageList = this.imageListVTR;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   *\r\n   */\r\n  handleClick() {\r\n    const modal = document.getElementById('myModal');\r\n    const span = document.getElementsByClassName('close')[0];\r\n    modal.style.display = 'block';\r\n    // When the user clicks on <span> (x), close the modal\r\n    span.onclick = function () {\r\n      modal.style.display = 'none';\r\n    };\r\n\r\n    // When the user clicks anywhere outside of the modal, close it\r\n    window.onclick = function (event) {\r\n      if (event.target == modal) {\r\n        modal.style.display = 'none';\r\n      }\r\n    };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./imgGallery.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2288,
                            "end": 2294,
                            "flags": 0,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "tagName": {
                            "pos": 2282,
                            "end": 2287,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoryinputCodeComponent",
            "id": "component-StoryinputCodeComponent-0badcbef75d8dc89b2d22fdc432bff85",
            "file": "libs/ui-library/src/lib/stories/molecule/input code/inputCode.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-inputCode",
            "styleUrls": [
                "./inputCode.scss"
            ],
            "styles": [],
            "template": "<article    class=\"template-fluid\"\n    [ngStyle]=\"{\n      'background-color': backgroundColor,\n      color: TextColor\n    }\"\n  >\n    <div\n      class=\"inputCode\"\n      [ngClass]=\"[\n        status ? (status | lowercase) : '',\n        types ? (types | lowercase) : '',\n        isDisabled ? 'disabled' : '',\n        isReadOnly ? 'readOnly' : ''\n      ]\"\n    >\n      <label id=\"test\" class=\"inputLabel\"\n        ><strong>Label {{ status == 'REQUIRED' ? '*' : '' }} </strong></label\n      ><br />\n    </div>\n    <lla-input-code\n      (sendData)=\"getData($event)\"\n      [isDisabled]=\"isDisabled\"\n      [isReadOnly]=\"isReadOnly\"\n      [status]=\"status\"\n      [count]=\"count\"\n      [types]=\"types\"\n    ></lla-input-code>\n    <div\n      class=\"inputCode\"\n      [ngClass]=\"[\n        status ? (status | lowercase) : '',\n        types ? (types | lowercase) : '',\n        isDisabled ? 'disabled' : '',\n        isReadOnly ? 'readOnly' : ''\n      ]\"\n    >\n      <mat-hint *ngIf=\"status == 'DEFAULT' || isDisabled || isReadOnly\"\n        >Assistive Text</mat-hint\n      >\n      <mat-hint *ngIf=\"status == 'SUCCESS'\" class=\"toaster success-background\"\n        >Success Text</mat-hint\n      >\n      <mat-hint *ngIf=\"status == 'ERROR'\" class=\"toaster error-background\"\n        >Error Text</mat-hint\n      >\n      <mat-hint *ngIf=\"status == 'REQUIRED'\">Required*</mat-hint>\n    </div>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "count",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "data",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "isDisabled",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "isReadOnly",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "status",
                    "defaultValue": "'default'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "types",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "description": "<p>To get data from child component(Input Code component)</p>\n",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "description": "<p>To get the current theme from storybook</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-inputCode',\r\n  template: `<article\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{\r\n      'background-color': backgroundColor,\r\n      color: TextColor\r\n    }\"\r\n  >\r\n    <div\r\n      class=\"inputCode\"\r\n      [ngClass]=\"[\r\n        status ? (status | lowercase) : '',\r\n        types ? (types | lowercase) : '',\r\n        isDisabled ? 'disabled' : '',\r\n        isReadOnly ? 'readOnly' : ''\r\n      ]\"\r\n    >\r\n      <label id=\"test\" class=\"inputLabel\"\r\n        ><strong>Label {{ status == 'REQUIRED' ? '*' : '' }} </strong></label\r\n      ><br />\r\n    </div>\r\n    <lla-input-code\r\n      (sendData)=\"getData($event)\"\r\n      [isDisabled]=\"isDisabled\"\r\n      [isReadOnly]=\"isReadOnly\"\r\n      [status]=\"status\"\r\n      [count]=\"count\"\r\n      [types]=\"types\"\r\n    ></lla-input-code>\r\n    <div\r\n      class=\"inputCode\"\r\n      [ngClass]=\"[\r\n        status ? (status | lowercase) : '',\r\n        types ? (types | lowercase) : '',\r\n        isDisabled ? 'disabled' : '',\r\n        isReadOnly ? 'readOnly' : ''\r\n      ]\"\r\n    >\r\n      <mat-hint *ngIf=\"status == 'DEFAULT' || isDisabled || isReadOnly\"\r\n        >Assistive Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'SUCCESS'\" class=\"toaster success-background\"\r\n        >Success Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'ERROR'\" class=\"toaster error-background\"\r\n        >Error Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'REQUIRED'\">Required*</mat-hint>\r\n    </div>\r\n  </article>`,\r\n  styleUrls: ['./inputCode.scss'],\r\n})\r\n/**\r\n * StoryinputCodeComponent\r\n */\r\nexport default class StoryinputCodeComponent {\r\n  getTheme = 'VTR';\r\n  backgroundColor = '';\r\n  TextColor = '';\r\n  status = 'default';\r\n  isdisabled = false;\r\n  Arr = Array;\r\n  data = '';\r\n  isDisabled;\r\n  isReadOnly;\r\n  count;\r\n  types;\r\n  /**\r\n   * To get data from child component(Input Code component)\r\n   */\r\n  getData(data) {\r\n    this.data = data;\r\n    console.log(this.data);\r\n  }\r\n  /**\r\n   * To get the current theme from storybook\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./inputCode.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "StoryLogoComponent",
            "id": "component-StoryLogoComponent-8adf6198af5ff6281367140f361e49ee",
            "file": "libs/ui-library/src/lib/stories/molecule/logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-logo",
            "styleUrls": [
                "./logo.scss"
            ],
            "styles": [],
            "template": "<div   class=\"template-fluid\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   <div class=\"hidden-xs hidden-sm\">\n     <lla-logo\n       (clickHandler)=\"eventHandler($event)\"\n       [altTag]=\"altContent\"\n       [imgPath]=\"logoDesktopPath\"\n     ></lla-logo>\n   </div>\n   <div class=\"visible-sm visible-xs hidden-md\">\n     <lla-logo\n       (clickHandler)=\"eventHandler($event)\"\n       [altTag]=\"altContent\"\n       [imgPath]=\"logoMobilePath\"\n     ></lla-logo>\n   </div>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "altContent",
                    "defaultValue": "'logo'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "FlowDesktopLogo",
                    "defaultValue": "'/flow/logo/logo-desktop.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "FlowMobileLogo",
                    "defaultValue": "'/flow/logo/logo-mobile.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "logoDesktopPath",
                    "defaultValue": "this.VTRDesktopLogo",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "logoMobilePath",
                    "defaultValue": "this.VTRMobileLogo",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "VTRDesktopLogo",
                    "defaultValue": "'/vtr/logo/logo-desktop.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "VTRMobileLogo",
                    "defaultValue": "'/vtr/logo/logo-mobile.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "description": "<p>StoryLogoComponent</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-logo',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <div class=\"hidden-xs hidden-sm\">\r\n      <lla-logo\r\n        (clickHandler)=\"eventHandler($event)\"\r\n        [altTag]=\"altContent\"\r\n        [imgPath]=\"logoDesktopPath\"\r\n      ></lla-logo>\r\n    </div>\r\n    <div class=\"visible-sm visible-xs hidden-md\">\r\n      <lla-logo\r\n        (clickHandler)=\"eventHandler($event)\"\r\n        [altTag]=\"altContent\"\r\n        [imgPath]=\"logoMobilePath\"\r\n      ></lla-logo>\r\n    </div>\r\n  </div>`,\r\n  styleUrls: ['./logo.scss'],\r\n})\r\n/**\r\n * StoryLogoComponent\r\n */\r\nexport default class StoryLogoComponent {\r\n  backgroundColor = '';\r\n  getTheme = 'VTR';\r\n  altContent = 'logo';\r\n  VTRDesktopLogo = '/vtr/logo/logo-desktop.svg';\r\n  VTRMobileLogo = '/vtr/logo/logo-mobile.svg';\r\n  FlowDesktopLogo = '/flow/logo/logo-desktop.svg';\r\n  FlowMobileLogo = '/flow/logo/logo-mobile.svg';\r\n\r\n  logoDesktopPath = this.VTRDesktopLogo;\r\n  logoMobilePath = this.VTRMobileLogo;\r\n\r\n  /**\r\n   * StoryLogoComponent\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n      if (this.getTheme == 'Flow') {\r\n        this.logoDesktopPath = this.FlowDesktopLogo;\r\n        this.logoMobilePath = this.FlowMobileLogo;\r\n      }\r\n      if (this.getTheme == 'VTR') {\r\n        this.logoDesktopPath = this.VTRDesktopLogo;\r\n        this.logoMobilePath = this.VTRMobileLogo;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./logo.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "StoryLogoPageComponent",
            "id": "component-StoryLogoPageComponent-f17834bd35ff676f48af8e7b346b9c8c",
            "file": "libs/ui-library/src/lib/stories/page/logo/logoPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-logo-page2",
            "styleUrls": [
                "./logoPage.scss"
            ],
            "styles": [],
            "template": "<div   class=\"template-fluid\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   <div style=\"display: flex;\">\n     <a class=\"hidden-xs hidden-sm\" [href]=\"url\">\n       <lla-logo\n         (clickHandler)=\"eventHandler($event)\"\n         [altTag]=\"altContent\"\n         [imgPath]=\"logoDesktopPath\"\n       ></lla-logo>\n     </a>\n     <a class=\"visible-sm visible-xs hidden-md\" [href]=\"url\">\n       <lla-logo\n         (clickHandler)=\"eventHandler($event)\"\n         [altTag]=\"altContent\"\n         [imgPath]=\"logoMobilePath\"\n       ></lla-logo>\n     </a>\n   </div>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "altContent",
                    "defaultValue": "'logo'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "FlowDesktopLogo",
                    "defaultValue": "'/flow/logo/logo-desktop.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "FlowMobileLogo",
                    "defaultValue": "'/flow/logo/logo-mobile.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "Link",
                    "defaultValue": "'http://google.com'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "logoDesktopPath",
                    "defaultValue": "this.VTRDesktopLogo",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "logoMobilePath",
                    "defaultValue": "this.VTRMobileLogo",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "VTRDesktopLogo",
                    "defaultValue": "'/vtr/logo/logo-desktop.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "VTRMobileLogo",
                    "defaultValue": "'/vtr/logo/logo-mobile.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "eventHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "description": "<p>Value emitted from child component</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "description": "<p>StoryLogoComponent</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-logo-page2',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <div style=\"display: flex;\">\r\n      <a class=\"hidden-xs hidden-sm\" [href]=\"url\">\r\n        <lla-logo\r\n          (clickHandler)=\"eventHandler($event)\"\r\n          [altTag]=\"altContent\"\r\n          [imgPath]=\"logoDesktopPath\"\r\n        ></lla-logo>\r\n      </a>\r\n      <a class=\"visible-sm visible-xs hidden-md\" [href]=\"url\">\r\n        <lla-logo\r\n          (clickHandler)=\"eventHandler($event)\"\r\n          [altTag]=\"altContent\"\r\n          [imgPath]=\"logoMobilePath\"\r\n        ></lla-logo>\r\n      </a>\r\n    </div>\r\n  </div>`,\r\n  styleUrls: ['./logoPage.scss'],\r\n})\r\n/**\r\n * StoryLogoPageComponent\r\n */\r\nexport default class StoryLogoPageComponent {\r\n  backgroundColor = '';\r\n  getTheme = 'VTR';\r\n  url = '';\r\n  altContent = 'logo';\r\n  Link = 'http://google.com';\r\n\r\n  VTRDesktopLogo = '/vtr/logo/logo-desktop.svg';\r\n  VTRMobileLogo = '/vtr/logo/logo-mobile.svg';\r\n  FlowDesktopLogo = '/flow/logo/logo-desktop.svg';\r\n  FlowMobileLogo = '/flow/logo/logo-mobile.svg';\r\n\r\n  logoDesktopPath = this.VTRDesktopLogo;\r\n  logoMobilePath = this.VTRMobileLogo;\r\n\r\n  /**\r\n   * StoryLogoComponent\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n      if (this.getTheme == 'Flow') {\r\n        this.logoDesktopPath = this.FlowDesktopLogo;\r\n        this.logoMobilePath = this.FlowMobileLogo;\r\n      }\r\n      if (this.getTheme == 'VTR') {\r\n        this.logoDesktopPath = this.VTRDesktopLogo;\r\n        this.logoMobilePath = this.VTRMobileLogo;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Value emitted from child component\r\n   */\r\n  eventHandler() {\r\n    console.log('test');\r\n    this.url = this.Link;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./logoPage.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-33268fc7d6d732ddc568719bccf50041",
            "file": "libs/ui-library/src/lib/stories/atom/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "iserror",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isprimary",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "description": "<p>Toggle component oninit</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-toggle',\r\n  templateUrl: './toggle.component.html',\r\n  styleUrls: ['./toggle.component.scss'],\r\n})\r\n/**\r\n * Toggle component\r\n */\r\nexport class ToggleComponent implements OnInit {\r\n  isChecked = false;\r\n  backgroundColor = false;\r\n  isprimary = false;\r\n  iserror = false;\r\n  /**\r\n   *Toggle component constructor\r\n   */\r\n  constructor() {\r\n    // Empty Constructor\r\n  }\r\n  /**\r\n   * Toggle component oninit\r\n   */\r\n  ngOnInit(): void {\r\n    // Empty function\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Toggle component constructor</p>\n",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div\r\n    *ngIf=\"isprimary\"\r\n    class=\"lla-toggle\"\r\n    [ngClass]=\"[\r\n      backgroundColor == 'rgba(255,255,255,1)'\r\n        ? 'primary-toggle'\r\n        : 'dark-toggle'\r\n    ]\"\r\n  >\r\n    <p class=\"toggle-caption\" *ngIf=\"caption\">Caption</p>\r\n    <mat-slide-toggle [disabled]=\"isdisabled\"\r\n      ><p *ngIf=\"label && !isChecked\">Off</p>\r\n      <p *ngIf=\"label && isChecked\">On</p></mat-slide-toggle\r\n    >\r\n  </div>\r\n  <div *ngIf=\"iserror\" class=\"lla-toggle error-toggle\">\r\n    <p class=\"toggle-caption\" *ngIf=\"caption\">Caption</p>\r\n    <mat-slide-toggle [disabled]=\"isdisabled\"\r\n      ><p *ngIf=\"label && !isChecked\">Off</p>\r\n      <p *ngIf=\"label && isChecked\">On</p></mat-slide-toggle\r\n    >\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TypographyComponent",
            "id": "component-TypographyComponent-781ea0c616ac1d02feb93a8ebc3a01e5",
            "file": "libs/ui-library/src/lib/stories/atom/typography/typography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-typography",
            "styleUrls": [
                "./typography.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./typography.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'#fff'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "colorVariant",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isbigsizes",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isbody",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isbutton",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isheading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "issubline",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "istextcombinations",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "textAlignment",
                    "defaultValue": "'left'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "TextColor",
                    "defaultValue": "'#000'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "description": "<p>Typography component oninit</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-typography',\r\n  templateUrl: './typography.component.html',\r\n  styleUrls: ['./typography.component.scss'],\r\n})\r\n/**\r\n * Typography component\r\n */\r\nexport class TypographyComponent implements OnInit {\r\n  textAlignment = 'left';\r\n  isbody = false;\r\n  isheading = false;\r\n  issubline = false;\r\n  istextcombinations = false;\r\n  isbigsizes = false;\r\n  isbutton = false;\r\n  backgroundColor = '#fff';\r\n  TextColor = '#000';\r\n  colorVariant = '';\r\n  /**\r\n   * Typography constructor\r\n   */\r\n  constructor() {\r\n    // Empty constructor\r\n  }\r\n  /**\r\n   * Typography component oninit\r\n   */\r\n  ngOnInit(): void {\r\n    // Empty function\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./typography.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Typography constructor</p>\n",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<article\r\n  class=\"template-fluid\"\r\n  [ngStyle]=\"{\r\n    'text-align': textAlignment,\r\n    'background-color': backgroundColor,\r\n    color: TextColor\r\n  }\"\r\n  [ngClass]=\"[\r\n    backgroundColor == 'rgba(0,0,0,1)' ? 'dark-theme' : '',\r\n    backgroundColor == 'rgba(255,255,255,1)' ? 'light-theme' : '',\r\n    backgroundColor == 'rgba(0,0,0,1)' ? 'bigsizes-dark' : '',\r\n    backgroundColor == 'rgba(255,255,255,1)' ? 'bigsizes-light' : ''\r\n  ]\"\r\n>\r\n  <section *ngIf=\"isbody\">\r\n    <div\r\n      [ngClass]=\"{\r\n        'primary-color': colorVariant === 'primary',\r\n        'success-color': colorVariant === 'success',\r\n        'info-color': colorVariant === 'info',\r\n        'warning-color': colorVariant === 'warning',\r\n        'disabled-color': colorVariant === 'disabled',\r\n        'error-color': colorVariant === 'error'\r\n      }\"\r\n    >\r\n      <h1 class=\"b1\">B1 Body</h1>\r\n      <h2 class=\"b2\">B2 Body</h2>\r\n      <h3 class=\"b3\">B3 Body</h3>\r\n      <h4 class=\"b4\">B4 Body</h4>\r\n    </div>\r\n  </section>\r\n  <section *ngIf=\"isheading\">\r\n    <div\r\n      [ngClass]=\"{\r\n        'primary-color': colorVariant === 'primary',\r\n        'success-color': colorVariant === 'success',\r\n        'info-color': colorVariant === 'info',\r\n        'warning-color': colorVariant === 'warning',\r\n        'disabled-color': colorVariant === 'disabled',\r\n        'error-color': colorVariant === 'error'\r\n      }\"\r\n    >\r\n      <h1 class=\"h1\">H1 Ultra Large</h1>\r\n      <h2 class=\"h2\">H2 Extra Large</h2>\r\n      <h3 class=\"h3\">H3 Large</h3>\r\n      <h4 class=\"h4\">H4 Medium</h4>\r\n      <h5 class=\"h5\">H5 Regular</h5>\r\n      <h6 class=\"h6\">H6 Small</h6>\r\n    </div>\r\n  </section>\r\n  <section *ngIf=\"issubline\">\r\n    <div\r\n      [ngClass]=\"{\r\n        'primary-color': colorVariant === 'primary',\r\n        'success-color': colorVariant === 'success',\r\n        'info-color': colorVariant === 'info',\r\n        'warning-color': colorVariant === 'warning',\r\n        'disabled-color': colorVariant === 'disabled',\r\n        'error-color': colorVariant === 'error'\r\n      }\"\r\n    >\r\n      <h1 class=\"s1\">S1 SUBLINE</h1>\r\n      <h2 class=\"s2\">S2 SUBLINE</h2>\r\n      <h3 class=\"s3\">S3 SUBLINE</h3>\r\n      <h4 class=\"s4\">S4 Subline</h4>\r\n    </div>\r\n  </section>\r\n  <section *ngIf=\"istextcombinations\"\r\n  [ngClass]=\"{\r\n    'primary-color': colorVariant === 'primary',\r\n    'success-color': colorVariant === 'success',\r\n    'info-color': colorVariant === 'info',\r\n    'warning-color': colorVariant === 'warning',\r\n    'disabled-color': colorVariant === 'disabled',\r\n    'error-color': colorVariant === 'error'\r\n  }\"\r\n  >\r\n    <p\r\n      class=\"storybook-title\"\r\n      [ngClass]=\"{\r\n        'storybook-title-large': textcombo === 'large',\r\n        'storybook-title-medium': textcombo === 'medium',\r\n        'storybook-title-small': textcombo === 'small',\r\n        'storybook-title-regular': textcombo === 'regular'\r\n      }\"\r\n    >\r\n      Meet the small wild cats of Bhutan\r\n    </p>\r\n    <p\r\n      class=\"storybook-body\"\r\n      [ngClass]=\"{\r\n        'storybook-body-large': textcombo === 'large',\r\n        'storybook-body-medium': textcombo === 'medium',\r\n        'storybook-body-small': textcombo === 'small',\r\n        'storybook-body-regular': textcombo === 'regular'\r\n      }\"\r\n    >\r\n      Did you know that Bhutan is a hotspot of wild cat diversity? It is home to\r\n      11 species of wild cats which is about 30% of all wild cat species found\r\n      in the world. Considering that Bhutan only covers .03% of the earth’s\r\n      surface, that number seems even more amazing.  \r\n    </p>\r\n  </section>\r\n  <section *ngIf=\"isbutton\"\r\n  [ngClass]=\"{\r\n    'primary-color': colorVariant === 'primary',\r\n    'success-color': colorVariant === 'success',\r\n    'info-color': colorVariant === 'info',\r\n    'warning-color': colorVariant === 'warning',\r\n    'disabled-color': colorVariant === 'disabled',\r\n    'error-color': colorVariant === 'error'\r\n  }\"\r\n  >\r\n    <div\r\n      [ngClass]=\"{\r\n        'primary-color': button === 'primary',\r\n        'disabled-color': button === 'disabled'\r\n      }\"\r\n    >\r\n      <p class=\"typography-button-large\">Button</p>\r\n      <p class=\"typography-button-medium\">Button</p>\r\n      <p class=\"typography-button-small\">Button</p>\r\n    </div>\r\n  </section>\r\n  <section *ngIf=\"isbigsizes\"\r\n     [ngClass]=\"{\r\n        'primary-color': colorVariant === 'primary',\r\n        'success-color': colorVariant === 'success',\r\n        'info-color': colorVariant === 'info',\r\n        'warning-color': colorVariant === 'warning',\r\n        'disabled-color': colorVariant === 'disabled',\r\n        'error-color': colorVariant === 'error'\r\n      }\"\r\n  >\r\n    <p class=\"storybook-bigsizes\">H7 Big <br />Daddy</p>\r\n  </section>\r\n</article>\r\n"
        },
        {
            "name": "UBCInformationComponent",
            "id": "component-UBCInformationComponent-764dbf450ce19977c283953dfbe1a2ef",
            "file": "apps/ubc-information/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-ubc-information",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'ubc-information'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-ubc-information',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class UBCInformationComponent {\r\n  title = 'ubc-information';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "UbcPagesAppComponent",
            "id": "component-UbcPagesAppComponent-cc0ac5706ff609fae30c84418876624d",
            "file": "apps/ubc-pages/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ubc-pages-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'ubc-pages'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ubc-pages-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class UbcPagesAppComponent {\r\n  title = 'ubc-pages';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "WideCardComponent",
            "id": "component-WideCardComponent-eebafcd39b879539cdd294cd3057bb53",
            "file": "libs/ui-library/src/lib/components/cards/wide-card/wide-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-wide-card",
            "styleUrls": [
                "./wide-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wide-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardData",
                    "line": 10,
                    "type": "WIDE_CARD"
                },
                {
                    "name": "isdarkTheme",
                    "defaultValue": "false",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport type { WIDE_CARD } from '../../../interfaces/wide-card';\r\n\r\n@Component({\r\n  selector: 'lla-wide-card',\r\n  templateUrl: './wide-card.component.html',\r\n  styleUrls: ['./wide-card.component.scss'],\r\n})\r\nexport class WideCardComponent {\r\n  @Input() cardData: WIDE_CARD;\r\n  @Input() isdarkTheme?: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-layout-wide {\r\n  .card-layout {\r\n    display: flex;\r\n    width: 760px;\r\n    padding: 0px;\r\n    box-shadow: 1px 1px 4px 1px var(--grey-400);\r\n  }\r\n  .card-layout img {\r\n    width: 380px;\r\n    height: auto;\r\n  }\r\n\r\n  .card-content {\r\n    padding: 30px 0px 32px 30px;\r\n  }\r\n\r\n  .card-tagline {\r\n    font-size: 15px;\r\n    line-height: 24px;\r\n    font-family: var(--InterRegular);\r\n    color: var(--grey-100);\r\n    padding-right: 50px;\r\n  }\r\n\r\n  .card-title {\r\n    font-family: var(--InterBold);\r\n    font-size: 34px;\r\n    line-height: 42px;\r\n    padding-top: 16px;\r\n    padding-right: 50px;\r\n  }\r\n\r\n  .card-placeholder {\r\n    font-family: var(--InterBold);\r\n    font-size: 34px;\r\n    line-height: 42px;\r\n    margin-bottom: 12px;\r\n    padding-right: 50px;\r\n  }\r\n\r\n  .card-body {\r\n    font-family: var(--InterRegular);\r\n    font-size: 17px;\r\n    line-height: 24px;\r\n  }\r\n\r\n  .card-footer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding-bottom: 10px;\r\n    margin-top: 20px;\r\n    padding-right: 42px;\r\n  }\r\n\r\n  .card-price {\r\n    font-family: var(--InterRegular);\r\n    font-size: 15px;\r\n    line-height: 24px;\r\n    color: var(--black-200);\r\n  }\r\n\r\n  .col-push {\r\n    flex-direction: row-reverse;\r\n  }\r\n\r\n\r\n  .card-layout-wide-dark {\r\n    background: var(--black-200);\r\n    .card-content {\r\n      padding: 30px 0px 32px 52px;\r\n    }\r\n    .col-push-image {\r\n      left: 54%;\r\n    }\r\n    .card-tagline,\r\n    .card-title,\r\n    .card-price,\r\n    .card-body,\r\n    .card-placeholder {\r\n      color: var(--white-900);\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./wide-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"card-layout-wide\">\r\n  <mat-card\r\n    class=\"card-layout\"\r\n    [ngClass]=\"{\r\n      'card-layout-wide-dark': isdarkTheme,\r\n      'col-push': cardData.contentRight\r\n    }\"\r\n  >\r\n    <img\r\n      src=\"{{ cardData.imageUrl }}\"\r\n      alt=\"{{ cardData.altText }}\"\r\n    />\r\n    <div\r\n      class=\"card-content\"\r\n   >\r\n      <div class=\"card-tagline\">{{ cardData.tagline }}</div>\r\n      <div class=\"card-title\">{{ cardData.title }}</div>\r\n      <div class=\"card-placeholder\">{{ cardData.placeholder }}</div>\r\n      <div class=\"card-body\">\r\n        {{ cardData.body }}\r\n      </div>\r\n      <div class=\"card-footer\">\r\n        <div class=\"card-price\">{{ cardData.price }}</div>\r\n        <button mat-raised-button class=\"button--primary btn-small\">\r\n          {{ cardData.btnText }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UBCInformationSharedModule"
                        },
                        {
                            "name": "UbcPagesSharedAppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FeatureLibraryModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UBCInformationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LandingComponent"
                        },
                        {
                            "name": "NavBarComponent"
                        },
                        {
                            "name": "UBCInformationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "UBCInformationComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UBCInformationSharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UbcPagesAppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "UbcPagesAppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "UbcPagesAppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UbcPagesSharedAppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiLibraryModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "CenteredCardComponent"
                        },
                        {
                            "name": "CtaCardComponent"
                        },
                        {
                            "name": "FullsizeCardComponent"
                        },
                        {
                            "name": "ImgGalleryComponent"
                        },
                        {
                            "name": "InputCodeComponent"
                        },
                        {
                            "name": "LogoComponent"
                        },
                        {
                            "name": "PlansCardComponent"
                        },
                        {
                            "name": "WideCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "CenteredCardComponent"
                        },
                        {
                            "name": "CtaCardComponent"
                        },
                        {
                            "name": "FullsizeCardComponent"
                        },
                        {
                            "name": "ImgGalleryComponent"
                        },
                        {
                            "name": "InputCodeComponent"
                        },
                        {
                            "name": "LogoComponent"
                        },
                        {
                            "name": "PlansCardComponent"
                        },
                        {
                            "name": "WideCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Bigsizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "body",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "breadCrumb",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "centeredCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Code",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CTACARD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "customViewports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/viewports.ts",
                "type": "object",
                "defaultValue": "{\t\r\n    mobile1: {\t\r\n      name: '320px',\t\r\n      styles: {\t\r\n        width: '320px',\t\r\n        height: '963px',\t\r\n      },\t\r\n    },\t\r\n    mobile2: {\t\r\n      name: '360px',\t\r\n      styles: {\t\r\n        width: '360px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    mobile3: {\t\r\n      name: '400px',\t\r\n      styles: {\t\r\n        width: '400px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    mobile4: {\t\r\n      name: '480px',\t\r\n      styles: {\t\r\n        width: '480px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet1: {\t\r\n      name: '600px',\t\r\n      styles: {\t\r\n        width: '600px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet2: {\t\r\n      name: '720px',\t\r\n      styles: {\t\r\n        width: '720px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet3: {\t\r\n      name: '840px',\t\r\n      styles: {\t\r\n        width: '840px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet4: {\t\r\n      name: '960px',\t\r\n      styles: {\t\r\n        width: '960px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop1: {\t\r\n      name: '1024px',\t\r\n      styles: {\t\r\n        width: '1024px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop2: {\t\r\n      name: '1280px',\t\r\n      styles: {\t\r\n        width: '1280px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop3: {\t\r\n      name: '1440px',\t\r\n      styles: {\t\r\n        width: '1440px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop4: {\t\r\n      name: '1600px',\t\r\n      styles: {\t\r\n        width: '1600px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop5: {\t\r\n      name: '1920px',\t\r\n      styles: {\t\r\n        width: '1920px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n  }"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-information/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-information/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-pages/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-pages/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-shell/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-shell/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n}"
            },
            {
                "name": "error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "fullsizeCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "fullsizewithCTACard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "fullsizewithPriceCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "getGreeting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-information-e2e/src/support/app.po.ts",
                "type": "",
                "defaultValue": "() => cy.get('h1')"
            },
            {
                "name": "getGreeting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-pages-e2e/src/support/app.po.ts",
                "type": "",
                "defaultValue": "() => cy.get('h1')"
            },
            {
                "name": "getGreeting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-shell-e2e/src/support/app.po.ts",
                "type": "",
                "defaultValue": "() => cy.get('h1')"
            },
            {
                "name": "grid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/grid/grid.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatGridListModule],\r\n  },\r\n  component: GridComponent,\r\n  props: {},\r\n})"
            },
            {
                "name": "Group",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "TemplateGroup.bind({})"
            },
            {
                "name": "Group",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "TemplateGroup.bind({})"
            },
            {
                "name": "heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "imgGallery",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/img gallery/imgGallery.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Inputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "link",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/list/list.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "logo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "logo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "neutral",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Password",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "plansCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Price",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "subline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "support",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "Story<ButtonsComponent>",
                "defaultValue": "(args) => ({\r\n  component: ButtonsComponent,\r\n  props: args,\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "Story<ColorsComponent>",
                "defaultValue": "(args: ColorsComponent) => ({\r\n  component: ColorsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                "type": "Story<IconsComponent>",
                "defaultValue": "(args: IconsComponent) => ({\r\n  component: IconsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "Story<InputsComponent>",
                "defaultValue": "(args: InputsComponent) => ({\r\n  component: InputsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/list/list.stories.ts",
                "type": "Story<ListComponent>",
                "defaultValue": "(args) => ({\r\n  component: ListComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "Story<RadiobuttonComponent>",
                "defaultValue": "(args) => ({\r\n  component: RadiobuttonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "Story<ToggleComponent>",
                "defaultValue": "(args) => ({\r\n  component: ToggleComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "Story<TypographyComponent>",
                "defaultValue": "(args: TypographyComponent) => ({\r\n  component: TypographyComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "Story<StoryAlertComponent>",
                "defaultValue": "(args: StoryAlertComponent) => ({\r\n  component: StoryAlertComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                "type": "Story<StorybreadCrumbComponent>",
                "defaultValue": "(\r\n  args: StorybreadCrumbComponent\r\n) => ({\r\n  component: StorybreadCrumbComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "Story<StoryCardComponent>",
                "defaultValue": "(\r\n  args: StoryCardComponent\r\n) => ({\r\n  component: StoryCardComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/img gallery/imgGallery.stories.ts",
                "type": "Story<StoryImgGalleryComponent>",
                "defaultValue": "(\r\n  args: StoryImgGalleryComponent\r\n) => ({\r\n  component: StoryImgGalleryComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                "type": "Story<StoryinputCodeComponent>",
                "defaultValue": "(\r\n  args: StoryinputCodeComponent\r\n) => ({\r\n  component: StoryinputCodeComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                "type": "Story<StoryLogoComponent>",
                "defaultValue": "(args: StoryLogoComponent) => ({\r\n  component: StoryLogoComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "Story<StoryalertPageComponent>",
                "defaultValue": "(\r\n  args: StoryalertPageComponent\r\n) => ({\r\n  component: StoryalertPageComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                "type": "Story<StoryLogoPageComponent>",
                "defaultValue": "(\r\n  args: StoryLogoPageComponent\r\n) => ({\r\n  component: StoryLogoPageComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "TemplateGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "TemplateGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "Story<RadiobuttonComponent>",
                "defaultValue": "(args) => ({\r\n  component: RadiobuttonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Textarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "textcombinations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "wideCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "removeBackSlashFromUrl",
                "file": "libs/util-library/src/lib/url-parser.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>A function to remove the backslash from resource url path.\nfor example:\ninput :&quot;https://cms-dev.lla.digital/uploads/<em>/originals/9d8504d1-4468-4777-a9b1-ead19bf7cb53.jpg&quot;\noutput :&quot;<a href=\"https://cms-dev.lla.digital/uploads/\">https://cms-dev.lla.digital/uploads/</a></em>/originals/9d8504d1-4468-4777-a9b1-ead19bf7cb53.jpg&quot;</p>\n",
                "args": [
                    {
                        "name": "url"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 306,
                            "end": 309,
                            "flags": 0,
                            "escapedText": "url"
                        },
                        "tagName": {
                            "pos": 300,
                            "end": 305,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>string</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "CARD_VARIANT",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"FULLSIZE\" | \"FULLSIZECTA\" | \"FULLSIZEPRICE\"",
                "file": "libs/ui-library/src/lib/components/cards/fullsize-card/fullsize-card.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPENETSTATUS",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"SUCCESS\" | \"ERROR\" | \"DEFAULT\"",
                "file": "libs/ui-library/src/lib/components/input-code/input-code.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPENETTYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"FILLIN\" | \"OUTLINE\"",
                "file": "libs/ui-library/src/lib/components/input-code/input-code.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPONENT_OPACITY",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"24\" | \"40\" | \"100\"",
                "file": "libs/ui-library/src/lib/components/alert/alert.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPONENT_STATUS",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"SUCCESS\" | \"WARNING\" | \"ERROR\" | \"INFO\"",
                "file": "libs/ui-library/src/lib/components/alert/alert.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPONENT_TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"full-width\" | \"default\"",
                "file": "libs/ui-library/src/lib/components/alert/alert.component.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts": [
                {
                    "name": "Bigsizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "body",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "subline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "Story<TypographyComponent>",
                    "defaultValue": "(args: TypographyComponent) => ({\r\n  component: TypographyComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "textcombinations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts": [
                {
                    "name": "breadCrumb",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                    "type": "Story<StorybreadCrumbComponent>",
                    "defaultValue": "(\r\n  args: StorybreadCrumbComponent\r\n) => ({\r\n  component: StorybreadCrumbComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts": [
                {
                    "name": "centeredCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CTACARD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "fullsizeCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "fullsizewithCTACard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "fullsizewithPriceCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "plansCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "Story<StoryCardComponent>",
                    "defaultValue": "(\r\n  args: StoryCardComponent\r\n) => ({\r\n  component: StoryCardComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "wideCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts": [
                {
                    "name": "Code",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                    "type": "Story<StoryinputCodeComponent>",
                    "defaultValue": "(\r\n  args: StoryinputCodeComponent\r\n) => ({\r\n  component: StoryinputCodeComponent,\r\n  props: args,\r\n})"
                }
            ],
            ".storybook/viewports.ts": [
                {
                    "name": "customViewports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/viewports.ts",
                    "type": "object",
                    "defaultValue": "{\t\r\n    mobile1: {\t\r\n      name: '320px',\t\r\n      styles: {\t\r\n        width: '320px',\t\r\n        height: '963px',\t\r\n      },\t\r\n    },\t\r\n    mobile2: {\t\r\n      name: '360px',\t\r\n      styles: {\t\r\n        width: '360px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    mobile3: {\t\r\n      name: '400px',\t\r\n      styles: {\t\r\n        width: '400px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    mobile4: {\t\r\n      name: '480px',\t\r\n      styles: {\t\r\n        width: '480px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet1: {\t\r\n      name: '600px',\t\r\n      styles: {\t\r\n        width: '600px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet2: {\t\r\n      name: '720px',\t\r\n      styles: {\t\r\n        width: '720px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet3: {\t\r\n      name: '840px',\t\r\n      styles: {\t\r\n        width: '840px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet4: {\t\r\n      name: '960px',\t\r\n      styles: {\t\r\n        width: '960px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop1: {\t\r\n      name: '1024px',\t\r\n      styles: {\t\r\n        width: '1024px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop2: {\t\r\n      name: '1280px',\t\r\n      styles: {\t\r\n        width: '1280px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop3: {\t\r\n      name: '1440px',\t\r\n      styles: {\t\r\n        width: '1440px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop4: {\t\r\n      name: '1600px',\t\r\n      styles: {\t\r\n        width: '1600px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop5: {\t\r\n      name: '1920px',\t\r\n      styles: {\t\r\n        width: '1920px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n  }"
                }
            ],
            "apps/ubc-information/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-information/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "apps/ubc-information/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-information/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "apps/ubc-pages/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-pages/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "apps/ubc-pages/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-pages/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "apps/ubc-shell/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-shell/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "apps/ubc-shell/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-shell/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts": [
                {
                    "name": "error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "Story<StoryAlertComponent>",
                    "defaultValue": "(args: StoryAlertComponent) => ({\r\n  component: StoryAlertComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts": [
                {
                    "name": "error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "Story<StoryalertPageComponent>",
                    "defaultValue": "(\r\n  args: StoryalertPageComponent\r\n) => ({\r\n  component: StoryalertPageComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Group",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "TemplateGroup.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "TemplateGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Group",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "TemplateGroup.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "Story<RadiobuttonComponent>",
                    "defaultValue": "(args) => ({\r\n  component: RadiobuttonComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "TemplateGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "Story<RadiobuttonComponent>",
                    "defaultValue": "(args) => ({\r\n  component: RadiobuttonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                    "type": "Story<ToggleComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ToggleComponent,\r\n  props: args,\r\n})"
                }
            ],
            "apps/ubc-information-e2e/src/support/app.po.ts": [
                {
                    "name": "getGreeting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-information-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "() => cy.get('h1')"
                }
            ],
            "apps/ubc-pages-e2e/src/support/app.po.ts": [
                {
                    "name": "getGreeting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-pages-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "() => cy.get('h1')"
                }
            ],
            "apps/ubc-shell-e2e/src/support/app.po.ts": [
                {
                    "name": "getGreeting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-shell-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "() => cy.get('h1')"
                }
            ],
            "libs/ui-library/src/lib/stories/atom/grid/grid.stories.ts": [
                {
                    "name": "grid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/grid/grid.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatGridListModule],\r\n  },\r\n  component: GridComponent,\r\n  props: {},\r\n})"
                }
            ],
            "libs/ui-library/src/lib/stories/atom/icons/icons.stories.ts": [
                {
                    "name": "icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                    "type": "Story<IconsComponent>",
                    "defaultValue": "(args: IconsComponent) => ({\r\n  component: IconsComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/ui-library/src/lib/stories/molecule/img gallery/imgGallery.stories.ts": [
                {
                    "name": "imgGallery",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/img gallery/imgGallery.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/img gallery/imgGallery.stories.ts",
                    "type": "Story<StoryImgGalleryComponent>",
                    "defaultValue": "(\r\n  args: StoryImgGalleryComponent\r\n) => ({\r\n  component: StoryImgGalleryComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts": [
                {
                    "name": "Inputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Password",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Price",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                    "type": "Story<InputsComponent>",
                    "defaultValue": "(args: InputsComponent) => ({\r\n  component: InputsComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "Textarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/ui-library/src/lib/stories/atom/button/button.stories.ts": [
                {
                    "name": "link",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                    "type": "Story<ButtonsComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ButtonsComponent,\r\n  props: args,\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n})"
                }
            ],
            "libs/ui-library/src/lib/stories/atom/list/list.stories.ts": [
                {
                    "name": "list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/list/list.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/list/list.stories.ts",
                    "type": "Story<ListComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ListComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/ui-library/src/lib/stories/molecule/logo/logo.stories.ts": [
                {
                    "name": "logo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                    "type": "Story<StoryLogoComponent>",
                    "defaultValue": "(args: StoryLogoComponent) => ({\r\n  component: StoryLogoComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/ui-library/src/lib/stories/page/logo/logoPage.stories.ts": [
                {
                    "name": "logo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                    "type": "Story<StoryLogoPageComponent>",
                    "defaultValue": "(\r\n  args: StoryLogoPageComponent\r\n) => ({\r\n  component: StoryLogoPageComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts": [
                {
                    "name": "neutral",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "support",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "Story<ColorsComponent>",
                    "defaultValue": "(args: ColorsComponent) => ({\r\n  component: ColorsComponent,\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "libs/util-library/src/lib/url-parser.util.ts": [
                {
                    "name": "removeBackSlashFromUrl",
                    "file": "libs/util-library/src/lib/url-parser.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>A function to remove the backslash from resource url path.\nfor example:\ninput :&quot;https://cms-dev.lla.digital/uploads/<em>/originals/9d8504d1-4468-4777-a9b1-ead19bf7cb53.jpg&quot;\noutput :&quot;<a href=\"https://cms-dev.lla.digital/uploads/\">https://cms-dev.lla.digital/uploads/</a></em>/originals/9d8504d1-4468-4777-a9b1-ead19bf7cb53.jpg&quot;</p>\n",
                    "args": [
                        {
                            "name": "url"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 306,
                                "end": 309,
                                "flags": 0,
                                "escapedText": "url"
                            },
                            "tagName": {
                                "pos": 300,
                                "end": 305,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/ui-library/src/lib/components/cards/fullsize-card/fullsize-card.component.ts": [
                {
                    "name": "CARD_VARIANT",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"FULLSIZE\" | \"FULLSIZECTA\" | \"FULLSIZEPRICE\"",
                    "file": "libs/ui-library/src/lib/components/cards/fullsize-card/fullsize-card.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/ui-library/src/lib/components/input-code/input-code.component.ts": [
                {
                    "name": "COMPENETSTATUS",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"SUCCESS\" | \"ERROR\" | \"DEFAULT\"",
                    "file": "libs/ui-library/src/lib/components/input-code/input-code.component.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "COMPENETTYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"FILLIN\" | \"OUTLINE\"",
                    "file": "libs/ui-library/src/lib/components/input-code/input-code.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/ui-library/src/lib/components/alert/alert.component.ts": [
                {
                    "name": "COMPONENT_OPACITY",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"24\" | \"40\" | \"100\"",
                    "file": "libs/ui-library/src/lib/components/alert/alert.component.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "COMPONENT_STATUS",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"SUCCESS\" | \"WARNING\" | \"ERROR\" | \"INFO\"",
                    "file": "libs/ui-library/src/lib/components/alert/alert.component.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "COMPONENT_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"full-width\" | \"default\"",
                    "file": "libs/ui-library/src/lib/components/alert/alert.component.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/viewports.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customViewports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-information-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGreeting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-information-e2e/src/support/commands.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chainable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-information/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UBCInformationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-information/src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-information/src/app/landing/landing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-information/src/app/nav-bar/nav-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-information/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-information/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-pages-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGreeting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-pages-e2e/src/support/commands.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chainable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-pages/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UbcPagesAppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-pages/src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-pages/src/app/landing/landing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-pages/src/app/nav-bar/nav-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-pages/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-pages/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGreeting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell-e2e/src/support/commands.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chainable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell/src/app/nav-bar/nav-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/feature-library/src/lib/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/feature-library/src/lib/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/cards/centered-card/centered-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CenteredCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/cards/cta-card/cta-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CtaCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/cards/fullsize-card/fullsize-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FullsizeCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/cards/plans-card/plans-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlansCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/cards/wide-card/wide-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WideCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImgGalleryComponent",
                "coveragePercent": 33,
                "coverageCount": "4/12",
                "status": "medium"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Iimages",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Imatrix",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/input-code/input-code.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputCodeComponent",
                "coveragePercent": 40,
                "coverageCount": "6/15",
                "status": "medium"
            },
            {
                "filePath": "libs/ui-library/src/lib/components/logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoComponent",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "libs/ui-library/src/lib/interfaces/centered-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CENTERED_CARD",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/interfaces/cta-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CTA_CARD",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/interfaces/custom-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CUSTOM_CARD",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/interfaces/fullsize-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FULLSIZE_CARD",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/interfaces/plans-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PLANS_CARD",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/interfaces/wide-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WIDE_CARD",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonsComponent",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "link",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "checkadd",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/colors/colors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorsComponent",
                "coveragePercent": 17,
                "coverageCount": "3/17",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "neutral",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "support",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/grid/grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/grid/grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "grid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/icons/icons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconsComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/inputs/inputs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputsComponent",
                "coveragePercent": 6,
                "coverageCount": "1/15",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Inputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Password",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Price",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/list/list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/list/list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadiobuttonComponent",
                "coveragePercent": 21,
                "coverageCount": "3/14",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypographyComponent",
                "coveragePercent": 15,
                "coverageCount": "2/13",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bigsizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "body",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textcombinations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryAlertComponent",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StorybreadCrumbComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "breadCrumb",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryCardComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/card/card.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CENTERED_CARD",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "centeredCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CTACARD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullsizeCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullsizewithCTACard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullsizewithPriceCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "plansCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "wideCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/img gallery/imgGallery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryImgGalleryComponent",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/img gallery/imgGallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "imgGallery",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/img gallery/imgGallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/input code/inputCode.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryinputCodeComponent",
                "coveragePercent": 14,
                "coverageCount": "2/14",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Code",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryLogoComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/page/alert/alertPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryalertPageComponent",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/page/logo/logoPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryLogoPageComponent",
                "coveragePercent": 14,
                "coverageCount": "2/14",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/util-library/src/lib/url-parser.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "removeBackSlashFromUrl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            }
        ]
    }
}